---
import BaseLayout from "../layouts/BaseLayout.astro";

const title = "Client-Side Observability";
const description = "Self-contained OpenTelemetry implementation with browser-based tracing";
const permalink = `${Astro.site.href}telemetry`;
---

<BaseLayout
  title={title}
  description={description}
  permalink={permalink}
>
  <div class="container">
    <h1>Client-Side Observability</h1>

    <div class="intro">
      <p>
        Real-time telemetry from your browsing session. All data stays in your browser—no backend, no tracking, no external services.
      </p>
    </div>

    <div class="dashboard-section">

      <div class="telemetry-header">
        <div class="controls">
          <button id="clear-data" class="btn btn-secondary">Clear Data</button>
          <button id="export-data" class="btn btn-primary">Export JSON</button>
          <select id="time-range" class="time-range-select">
            <option value="1h">Last Hour</option>
            <option value="24h">Last 24 Hours</option>
            <option value="7d">Last 7 Days</option>
          </select>
        </div>
      </div>

      <section class="metrics-grid">
        <div class="metric-card">
          <span class="metric-label">Total Traces</span>
          <span class="metric-value" id="total-traces">--</span>
        </div>
        <div class="metric-card">
          <span class="metric-label">Avg Page Load</span>
          <span class="metric-value" id="avg-load">--</span>
        </div>
        <div class="metric-card">
          <span class="metric-label">LCP (P95)</span>
          <span class="metric-value" id="lcp-p95">--</span>
        </div>
        <div class="metric-card">
          <span class="metric-label">CLS</span>
          <span class="metric-value" id="cls-value">--</span>
        </div>
      </section>

      <section class="visualization-section">
        <h3>Trace Timeline</h3>
        <p class="viz-description">Click on any point to see detailed trace information</p>
        <div id="timeline-view" class="viz-container"></div>
      </section>

      <section class="trace-detail" id="trace-detail" style="display: none;">
        <h3>Trace Details</h3>
        <div id="span-waterfall" class="viz-container"></div>
        <div id="span-attributes"></div>
      </section>
    </div>

    <hr style="margin: 4em 0; border: none; border-top: 1px solid #e0e0e0;" />

    <h2>Why I Built This</h2>
    <p>
      Working on distributed systems at Grafana means thinking about observability constantly—how do we instrument services,
      collect telemetry, and understand system behavior? But most observability solutions assume you have servers, databases,
      and centralized collection pipelines.
    </p>
    <p>
      I wanted to challenge that assumption. What if we applied the same principles to a static site deployed on Netlify?
      Can we get meaningful insights using only browser APIs? The answer is yes.
    </p>

    <h2>How It Works</h2>
    <div class="technical-details">
      <div class="detail-section">
        <h3>1. Browser-Based Tracing</h3>
        <p>
          OpenTelemetry JS runs entirely in your browser, collecting traces for page loads, navigation events,
          resource timing (CSS, JS, images), and user interactions. Every action generates spans that follow
          the OpenTelemetry specification.
        </p>
      </div>

      <div class="detail-section">
        <h3>2. Local Storage</h3>
        <p>
          Instead of sending traces to a backend, they're stored in IndexedDB right in your browser.
          No data leaves your machine. No external services. No privacy concerns.
          You own your telemetry data completely.
        </p>
      </div>

      <div class="detail-section">
        <h3>3. Client-Side Visualization</h3>
        <p>
          This page reads from IndexedDB and renders a timeline view of your traces.
          You can see exactly how long pages took to load, which resources were slowest,
          and how you navigated through the site—all from your own browsing session.
        </p>
      </div>

      <div class="detail-section">
        <h3>4. Static Deployment</h3>
        <p>
          Everything is client-side JavaScript bundled with Astro and deployed as static assets to Netlify.
          No servers to maintain. No databases to scale. No infrastructure costs.
          Just pure observability as a first-class feature of the application.
        </p>
      </div>
    </div>

    <h2>What You Can Observe</h2>
    <p>
      The dashboard tracks <strong>page load performance</strong> (time to first byte, DOM content loaded, full page load),
      <strong>resource timing</strong> (how long each CSS, JS, and image took to load),
      <strong>navigation patterns</strong> (your journey through the site with timestamps),
      <strong>Web Vitals</strong> (core metrics like LCP, FID, CLS), and
      <strong>custom events</strong> (interactions like link clicks and theme toggles).
    </p>

    <h2>The Builder Philosophy</h2>
    <p>
      This project embodies what I love about building: taking production-grade patterns and applying them
      in unexpected contexts. Observability isn't just for microservices and Kubernetes clusters—it's a
      mindset that applies anywhere you want to understand behavior.
    </p>
    <p>
      By building this without external dependencies, I'm showing that the principles matter more than the tools.
      You don't need Prometheus, Grafana Cloud, or a metrics backend to practice good observability.
      You just need curiosity and the right APIs.
    </p>
  </div>

  <script>
    if (typeof window !== 'undefined') {
      import('../lib/telemetry/dashboard').then(module => {
        module.initializeDashboard();
      });
    }
  </script>
</BaseLayout>

<style>
  .intro {
    background: var(--bg-accent, rgba(0, 0, 0, 0.03));
    padding: 1.5em;
    border-left: 4px solid var(--primary-color, #0066cc);
    margin: 2em 0;
    border-radius: 4px;
  }

  .intro p {
    margin: 0;
    font-size: 1.1rem;
    line-height: 1.7;
  }

  .technical-details {
    margin: 2em 0;
  }

  .detail-section {
    margin: 2em 0;
    padding-left: 1em;
    border-left: 2px solid var(--border-color, rgba(0, 0, 0, 0.1));
  }

  .detail-section h3 {
    margin-top: 0;
    color: var(--primary-color, #0066cc);
    font-size: 1.3em;
  }

  .detail-section p {
    margin: 0.5em 0;
    line-height: 1.7;
  }


  .dashboard-section {
    margin: 3em 0;
  }

  .telemetry-header {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 1.5em;
  }

  .controls {
    display: flex;
    gap: 0.75em;
    align-items: center;
  }

  .btn {
    padding: 0.5em 1em;
    border: none;
    border-radius: 4px;
    font-size: 0.9rem;
    cursor: pointer;
    font-family: var(--font-family-sans);
    transition: all 0.2s;
  }

  .btn-primary {
    background: #0066cc;
    color: white;
  }

  .btn-primary:hover {
    background: #0052a3;
  }

  .btn-secondary {
    background: #e0e0e0;
    color: #333;
  }

  .btn-secondary:hover {
    background: #d0d0d0;
  }

  .time-range-select {
    padding: 0.5em;
    border: 1px solid #d0d0d0;
    border-radius: 4px;
    font-size: 0.9rem;
    font-family: var(--font-family-sans);
    cursor: pointer;
  }

  .metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1em;
    margin-bottom: 2em;
  }

  .metric-card {
    background: #fafafa;
    border: 1px solid #e8e8e8;
    border-radius: 8px;
    padding: 1.5em;
    display: flex;
    flex-direction: column;
    gap: 0.5em;
  }

  .metric-label {
    font-size: 0.875rem;
    color: #666;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-weight: 500;
  }

  .metric-value {
    font-size: 2rem;
    font-weight: 600;
    color: #1a1a1a;
  }

  .visualization-section,
  .trace-detail {
    background: #fafafa;
    border: 1px solid #e8e8e8;
    border-radius: 8px;
    padding: 1.5em;
    margin-bottom: 1.5em;
  }

  .visualization-section h3,
  .trace-detail h3 {
    margin-top: 0;
    margin-bottom: 0.5em;
    font-size: 1.25rem;
    color: #1a1a1a;
  }

  .viz-description {
    font-size: 0.9rem;
    color: #666;
    margin: 0 0 1em 0;
  }

  .viz-container {
    min-height: 250px;
    background: white;
    border-radius: 4px;
    padding: 1em;
    overflow-x: auto;
  }

  @media (max-width: 768px) {
    .intro {
      padding: 1em;
    }

    .telemetry-header {
      flex-direction: column;
      align-items: stretch;
    }

    .controls {
      flex-direction: column;
    }

    .metrics-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
