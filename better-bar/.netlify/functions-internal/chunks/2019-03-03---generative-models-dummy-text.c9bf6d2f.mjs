import { h as createVNode, F as Fragment } from './astro.98e1a385.mjs';
import 'html-escaper';
import 'cookie';
import 'kleur/colors';
import 'slash';
import 'path-to-regexp';
import 'mime';
import 'string-width';

const html = "<p><img src=\"media/textgen_example.gif\" alt=\"textgen\"></p>\n<p>tl;dr\n<code>pip install textgen</code> :rocket:</p>\n<p>Recently went to Stockholm AI <a href=\"https://www.eventbrite.co.uk/e/study-group-13-speech-recognition-and-deep-generative-models-tickets-56243370435?fbclid=IwAR1o_9Aa4FtsgPubMDR43c5yjjmbwJ_OotGKl2_6wgNtDBiTRuivSKIgty0\" target=\"_blank\" rel=\"nofollow\">study group</a>; where <a href=\"http://www.csc.kth.se/~butepage/\" target=\"_blank\" rel=\"nofollow\">Judith</a>  presented a talk on generative models.</p>\n<h2 id=\"generative-model\">Generative model</h2>\n<p>A generative model is basically a overfitted model for trying to describe the underlying data and being able to generate predictions based on it, by providing either a encoding and a decoder or a distribution to sample from.</p>\n<p>This can be used for generating mock-data for any type of text-based entity or column (bare in mind that it should not be cruicial to your organization ofc). Having a set of known text-based features that gets presented in demos or at any upstart of a project can be generated by a generative model on a learned distribution that serves as the dummy data creator.</p>\n<p>As with every python implementation, there is usually always a python package for that, as with <a href=\"https://github.com/minimaxir/textgenrnn\" target=\"_blank\" rel=\"nofollow\">minimaxir/textgen</a>.</p>\n<p>However, it took some time to get everything setup so I prepared for myself some handy little snippets and docker file for getting everything setup, as had to get randomly generated data for a multitude of various sources and found that I would provide a simple snippet to interact with this wonderful package.</p>\n<p>If you have not used keras/deep learning but want to get it setup and use it. In the repo there is documentation on how to get started\n<a href=\"https://github.com/eleijonmarck/data-generator\" target=\"_blank\" rel=\"nofollow\">eleijonmarck/data-generator</a></p>\n<ol>\n<li>Get the data to <code>sample-datasets</code>, with a <code>column_name</code> and the text data you want to generate.</li>\n<li>Train the generator using the <code>textgen/train-textgen.py</code> or <code>make example-train</code></li>\n</ol>";

				const frontmatter = {"title":"Generative model for text mock-data","date":"2019-03-03T22:40:32.169Z","template":"post","draft":false,"slug":"generative-models-dummy-text","category":"algorithms","tags":["nlp","generative-model"],"description":"Any text-based entity or text-based column for upstarts or demos can be populated by generating mock data from a already learnt distribution or a encoding/decoding using textgen.","socialImage":"/media/textgen_example.gif"};
				const file = "/Users/eleijonmarck/dev/eleijonmarck/better-bar/src/data/blog-posts/2019-03-03---generative-models-dummy-text.md";
				const url = undefined;
				function rawContent() {
					return "\n![textgen](media/textgen_example.gif)\n\ntl;dr\n```pip install textgen``` :rocket:\n\nRecently went to Stockholm AI [study group](https://www.eventbrite.co.uk/e/study-group-13-speech-recognition-and-deep-generative-models-tickets-56243370435?fbclid=IwAR1o_9Aa4FtsgPubMDR43c5yjjmbwJ_OotGKl2_6wgNtDBiTRuivSKIgty0); where [Judith](http://www.csc.kth.se/~butepage/)  presented a talk on generative models.\n\n## Generative model\nA generative model is basically a overfitted model for trying to describe the underlying data and being able to generate predictions based on it, by providing either a encoding and a decoder or a distribution to sample from.\n\nThis can be used for generating mock-data for any type of text-based entity or column (bare in mind that it should not be cruicial to your organization ofc). Having a set of known text-based features that gets presented in demos or at any upstart of a project can be generated by a generative model on a learned distribution that serves as the dummy data creator.\n\nAs with every python implementation, there is usually always a python package for that, as with [minimaxir/textgen](https://github.com/minimaxir/textgenrnn).\n\nHowever, it took some time to get everything setup so I prepared for myself some handy little snippets and docker file for getting everything setup, as had to get randomly generated data for a multitude of various sources and found that I would provide a simple snippet to interact with this wonderful package.\n\nIf you have not used keras/deep learning but want to get it setup and use it. In the repo there is documentation on how to get started\n[eleijonmarck/data-generator](https://github.com/eleijonmarck/data-generator)\n\n1. Get the data to `sample-datasets`, with a `column_name` and the text data you want to generate.\n2. Train the generator using the `textgen/train-textgen.py` or `make example-train`\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"generative-model","text":"Generative model"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
