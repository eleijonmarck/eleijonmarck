import { h as createVNode, F as Fragment } from './astro.98e1a385.mjs';
import 'html-escaper';
import 'cookie';
import 'kleur/colors';
import 'slash';
import 'path-to-regexp';
import 'mime';
import 'string-width';

const html = "<p>Most tutorials are stating the somewhat obvious as to why you should test your code or you should separate your domain from your application logic.</p>\n<blockquote>\n<p>“What does this really mean?”</p>\n</blockquote>\n<hr>\n<p>gist:</p>\n<ul>\n<li>side effect definition</li>\n<li>how it is being introduced and somewhat neglected</li>\n<li>examples from real application</li>\n<li>functional programming vs imperitive</li>\n</ul>\n<h2 id=\"side-effects\">Side Effects</h2>\n<p>wiki definition:\n<a href=\"https://en.wikipedia.org/wiki/Side_effect_(computer_science)\" target=\"_blank\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Side_effect_(computer_science)</a></p>\n<h2 id=\"introduced-in-concept\">introduced in concept</h2>\n<h2 id=\"example-in-javascript-mapfilter-vs-for-loop\">example in javascript map/filter vs for loop</h2>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #2e3440ff; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #d8dee9ff\">var y = [1,2,3]</span></span>\n<span class=\"line\"><span style=\"color: #d8dee9ff\">for i in range(y):</span></span>\n<span class=\"line\"><span style=\"color: #d8dee9ff\">  y++</span></span></code></pre>\n<h2 id=\"example-from-functional-haskell-vs-imperitive-for-loop\">example from functional haskell vs imperitive for loop</h2>\n<h2 id=\"testing\">testing</h2>\n<p>How do you test this? It is good to separate your “domain” code from the outside world (side-effects). The fmt.Println is a side effect (printing to stdout) and the string we send in is our domain.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #2e3440ff; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #81A1C1\">package</span><span style=\"color: #D8DEE9FF\"> main</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #81A1C1\">import</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">fmt</span><span style=\"color: #ECEFF4\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #81A1C1\">func</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">main</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    fmt</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">Println</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Hello World</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">)</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">}</span></span></code></pre>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #2e3440ff; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #81A1C1\">package</span><span style=\"color: #D8DEE9FF\"> main</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #81A1C1\">import</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">fmt</span><span style=\"color: #ECEFF4\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #81A1C1\">func</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">Hello</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">string</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Hello, world</span><span style=\"color: #ECEFF4\">\"</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #81A1C1\">func</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">main</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    fmt</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">Println</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #88C0D0\">Hello</span><span style=\"color: #ECEFF4\">())</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">}</span></span></code></pre>\n<p>This way we can test the domain of our software and disregard any side effects. We just want the pure domain logic. We do not really care if this goes out to stdout or to stderr.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #2e3440ff; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #81A1C1\">package</span><span style=\"color: #D8DEE9FF\"> main</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #81A1C1\">import</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">testing</span><span style=\"color: #ECEFF4\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #81A1C1\">func</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">TestHello</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">t </span><span style=\"color: #81A1C1\">*</span><span style=\"color: #D8DEE9FF\">testing</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">T</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">got</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">:=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">Hello</span><span style=\"color: #ECEFF4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">want</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">:=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Hello, world</span><span style=\"color: #ECEFF4\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">if</span><span style=\"color: #D8DEE9FF\"> got </span><span style=\"color: #81A1C1\">!=</span><span style=\"color: #D8DEE9FF\"> want </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        t</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">Errorf</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">got </span><span style=\"color: #EBCB8B\">%q</span><span style=\"color: #A3BE8C\"> want </span><span style=\"color: #EBCB8B\">%q</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> got</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> want</span><span style=\"color: #ECEFF4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">}</span></span></code></pre>";

				const frontmatter = {"title":"Side Effects","date":"2020-04-12","template":"post","draft":false,"slug":"SWE","category":"software-engineering","tags":["software-engineering"],"description":"A short but concise description of what side effects mean in software development","socialImage":""};
				const file = "/Users/eleijonmarck/dev/eleijonmarck/better-bar/src/data/blog-posts/2020-04-12---side-effects.md";
				const url = undefined;
				function rawContent() {
					return "\nMost tutorials are stating the somewhat obvious as to why you should test your code or you should separate your domain from your application logic.\n> \"What does this really mean?\"\n\n\n---\ngist:\n- side effect definition\n- how it is being introduced and somewhat neglected\n- examples from real application\n- functional programming vs imperitive\n\n## Side Effects\nwiki definition:\nhttps://en.wikipedia.org/wiki/Side_effect_(computer_science)\n\n\n## introduced in concept\n\n## example in javascript map/filter vs for loop\n```\nvar y = [1,2,3]\nfor i in range(y):\n  y++\n```\n\n## example from functional haskell vs imperitive for loop\n\n## testing\n\nHow do you test this? It is good to separate your \"domain\" code from the outside world (side-effects). The fmt.Println is a side effect (printing to stdout) and the string we send in is our domain.\n\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello World\")\n}\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc Hello() string {\n    return \"Hello, world\"\n}\n\nfunc main() {\n    fmt.Println(Hello())\n}\n```\n\nThis way we can test the domain of our software and disregard any side effects. We just want the pure domain logic. We do not really care if this goes out to stdout or to stderr.\n\n```go\npackage main\n\nimport \"testing\"\n\nfunc TestHello(t *testing.T) {\n    got := Hello()\n    want := \"Hello, world\"\n\n    if got != want {\n        t.Errorf(\"got %q want %q\", got, want)\n    }\n}\n```";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"side-effects","text":"Side Effects"},{"depth":2,"slug":"introduced-in-concept","text":"introduced in concept"},{"depth":2,"slug":"example-in-javascript-mapfilter-vs-for-loop","text":"example in javascript map/filter vs for loop"},{"depth":2,"slug":"example-from-functional-haskell-vs-imperitive-for-loop","text":"example from functional haskell vs imperitive for loop"},{"depth":2,"slug":"testing","text":"testing"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
