import { h as createVNode, F as Fragment } from './astro.98e1a385.mjs';
import 'html-escaper';
import 'cookie';
import 'kleur/colors';
import 'slash';
import 'path-to-regexp';
import 'mime';
import 'string-width';

const html = "<p>gist</p>\n<ul>\n<li>install yarn</li>\n<li>initialize a project using yarn</li>\n<li>add dependencies</li>\n<li>setup a decent tsconfig</li>\n</ul>\n<hr>\n<h2 id=\"yarn\">Yarn</h2>\n<p>desription of yarn</p>\n<p>Create an initial package.json, the project configuration file:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #2e3440ff; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #D8DEE9FF\">$ yarn init</span></span></code></pre>\n<p>Install initial dependencies (-D flag is a development dependency):</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #2e3440ff; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #D8DEE9FF\">$ yarn add @types/node typescript</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">$ yarn add -D ts-node</span></span></code></pre>\n<p>Create tsconfig.json, required for tsc and ts-node, to compile TypeScript to JavaScript:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #2e3440ff; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #D8DEE9FF\">$ yarn tsc --init --rootDir src --outDir ./bin --esModuleInterop --lib ES2019 --module commonjs --noImplicitAny </span><span style=\"color: #88C0D0\">true</span></span></code></pre>\n<p>Create your first source file in src folder:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #2e3440ff; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #D8DEE9FF\">$ mkdir src</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">$ </span><span style=\"color: #88C0D0\">echo</span><span style=\"color: #D8DEE9FF\"> “console.log</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">‘Hello World</span><span style=\"color: #EBCB8B\">\\!\\!\\!</span><span style=\"color: #D8DEE9FF\">’</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\">” </span><span style=\"color: #81A1C1\">></span><span style=\"color: #D8DEE9FF\"> src/app.ts</span></span></code></pre>\n<p>Build the project:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #2e3440ff; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #d8dee9ff\">$ yarn tsc</span></span>\n<span class=\"line\"><span style=\"color: #d8dee9ff\"></span></span>\n<span class=\"line\"><span style=\"color: #d8dee9ff\">tsc, TypeScript to JavaScript compiler, is located in ./node_modules/.bin/tsc. yarn resolves the path and run it with node. The command above compiles our TypeScript to JavaScript with an ouput to ./bin folder. Now, you can run the output JavaScript file, ./bin/app.js, with node:</span></span></code></pre>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #2e3440ff; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #d8dee9ff\">$ node ./bin/app.js</span></span></code></pre>\n<p>For development purposes, ts-node is used, to run code without a compilation. ts-node will compile it on fly:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #2e3440ff; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #d8dee9ff\">$ yarn ts-node ./src/app.ts</span></span></code></pre>\n<p>As with tsc, we run ts-node with yarn to resolve it location.</p>\n<hr>\n<p>If you really want to set it up properly, you also add nodemon for hot-reloading of the code changes</p>\n<p><a href=\"https://stackoverflow.com/questions/37979489/how-to-watch-and-reload-ts-node-when-typescript-files-change\" target=\"_blank\" rel=\"nofollow\">https://stackoverflow.com/questions/37979489/how-to-watch-and-reload-ts-node-when-typescript-files-change</a></p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #2e3440ff; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #D8DEE9FF\">$ nodemon --watch </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">src/**</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> --ext </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">ts,json</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> --ignore </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">src/**/*.spec.ts</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> --exec </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">ts-node src/index.ts</span><span style=\"color: #ECEFF4\">\"</span></span></code></pre>";

				const frontmatter = {"title":"New typescript yarn project","date":"2021-02-06","template":"post","draft":false,"slug":"typescript","category":"software-engineering","tags":["software-engineering","node","js","ts"],"description":"A description of how to setup a project using yarn with typescript support from the beginning","socialImage":""};
				const file = "/Users/eleijonmarck/dev/eleijonmarck/better-bar/src/data/blog-posts/2021-02-06---typescript-yarn-project.md";
				const url = undefined;
				function rawContent() {
					return "\ngist\n\n- install yarn\n- initialize a project using yarn\n- add dependencies\n- setup a decent tsconfig\n\n---\n\n## Yarn\n\ndesription of yarn\n\nCreate an initial package.json, the project configuration file:\n\n```bash\n$ yarn init\n```\n\nInstall initial dependencies (-D flag is a development dependency):\n\n```bash\n$ yarn add @types/node typescript\n$ yarn add -D ts-node\n```\n\nCreate tsconfig.json, required for tsc and ts-node, to compile TypeScript to JavaScript:\n\n```bash\n$ yarn tsc --init --rootDir src --outDir ./bin --esModuleInterop --lib ES2019 --module commonjs --noImplicitAny true\n```\n\nCreate your first source file in src folder:\n\n```bash\n$ mkdir src\n$ echo “console.log(‘Hello World\\!\\!\\!’)” > src/app.ts\n```\n\nBuild the project:\n\n```\n$ yarn tsc\n\ntsc, TypeScript to JavaScript compiler, is located in ./node_modules/.bin/tsc. yarn resolves the path and run it with node. The command above compiles our TypeScript to JavaScript with an ouput to ./bin folder. Now, you can run the output JavaScript file, ./bin/app.js, with node:\n```\n\n```\n$ node ./bin/app.js\n```\n\nFor development purposes, ts-node is used, to run code without a compilation. ts-node will compile it on fly:\n\n```\n$ yarn ts-node ./src/app.ts\n```\n\nAs with tsc, we run ts-node with yarn to resolve it location.\n\n---\n\nIf you really want to set it up properly, you also add nodemon for hot-reloading of the code changes\n\nhttps://stackoverflow.com/questions/37979489/how-to-watch-and-reload-ts-node-when-typescript-files-change\n\n```bash\n$ nodemon --watch \"src/**\" --ext \"ts,json\" --ignore \"src/**/*.spec.ts\" --exec \"ts-node src/index.ts\"\n```\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"yarn","text":"Yarn"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
