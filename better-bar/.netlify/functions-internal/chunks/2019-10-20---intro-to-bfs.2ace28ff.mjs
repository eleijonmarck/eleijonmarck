import { h as createVNode, F as Fragment } from './astro.98e1a385.mjs';
import 'html-escaper';
import 'cookie';
import 'kleur/colors';
import 'slash';
import 'path-to-regexp';
import 'mime';
import 'string-width';

const html = "<h1 id=\"introduction-to-bfs-breadth-first-search\">Introduction to BFS (breadth first search)</h1>\n<p>As always we want to start of by talking about why we would actually be learning this material. BFS is a algorithm used to traverse a set of paths to find the “shortest path” to something in a graph problem; solving problems such as minimum steps of solving the Rubik’s Cube. Do not get discouraged because of solving it as a graph; since most problems can be converted into a graph problem and sometimes in a few steps. Why are we getting the “shortest” path tough; we are searching on a broad approach and exploring the field within that level fully before actually traversing to the next level of depth of a problem. For example analyzing networks, mapping routes, and scheduling are graph problems.</p>\n<p><img src=\"images/bfs/bfs_level_traversal.jpg\" alt=\"hackerearth\"></p>\n<blockquote>\n<p>BFS is a algorithm used to traverse a set of paths to find the “shortest path” to something in a graph problem; solving problems such as minimum steps of solving the Rubik’s Cube</p>\n</blockquote>\n<hr>\n<h2 id=\"bfs-vs-dfs\">BFS vs DFS</h2>\n<p>The act of searching or traversing through a graph data structure is fairly simple: it just means that we’re probably visiting every single vertex (and by proxy, every single edge) in the graph. At it’s very core, the only difference between traversing a graph by breadth or by depth is the order in which we visit the vertices in a graph. In other words, the order in which the vertices of a graph are visited is actually how we can classify different graph traversal algorithms.\nIn both tree and graph traversal, the DFS algorithm uses a stack data structure. By comparison, the breadth-first search algorithm traverses broadly into a structure, by visiting neighboring sibling nodes before visiting children nodes. In both tree and graph traversal, the BFS algorithm implements a queue data structure.</p>\n<p><img src=\"images/bfs/bfs_vs_dfs.jpeg\" alt=\"bfs_vs_dfs\"></p>\n<blockquote>\n<p>In both tree and graph traversal, the DFS algorithm uses a stack data structure. By comparison, the breadth-first search algorithm traverses broadly into a structure, by visiting neighboring sibling nodes before visiting children nodes. In both tree and graph traversal, the BFS algorithm implements a queue data structure.</p>\n</blockquote>\n<h2 id=\"algorithm\">Algorithm</h2>\n<p>The backbone of a breadth-first search consists of these basic steps:</p>\n<ul>\n<li>Add a node/vertex from the graph to a queue of nodes to be “visited”.</li>\n<li>Visit the topmost node in the queue, and mark it as such.</li>\n<li>If that node has any neighbors, check to see if they have been “visited” or not.</li>\n<li>Add any neighboring nodes that still need to be “visited” to the queue.</li>\n<li>Remove the node we’ve visited from the queue.</li>\n</ul>\n<h2 id=\"real-world-example\">Real world example</h2>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #2e3440ff; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #616E88\"># [200] Number of Islands</span></span>\n<span class=\"line\"><span style=\"color: #616E88\">#</span></span>\n<span class=\"line\"><span style=\"color: #616E88\"># https://leetcode.com/problems/number-of-islands/description/</span></span>\n<span class=\"line\"><span style=\"color: #616E88\">#</span></span>\n<span class=\"line\"><span style=\"color: #616E88\"># algorithms</span></span>\n<span class=\"line\"><span style=\"color: #616E88\"># Medium</span></span>\n<span class=\"line\"><span style=\"color: #616E88\">#</span></span>\n<span class=\"line\"><span style=\"color: #616E88\"># Given a 2d grid map of '1's (land) and '0's (water), count the number of</span></span>\n<span class=\"line\"><span style=\"color: #616E88\"># islands. An island is surrounded by water and is formed by connecting</span></span>\n<span class=\"line\"><span style=\"color: #616E88\"># adjacent lands horizontally or vertically. You may assume all four edges of</span></span>\n<span class=\"line\"><span style=\"color: #616E88\"># the grid are all surrounded by water.</span></span>\n<span class=\"line\"><span style=\"color: #616E88\">#</span></span>\n<span class=\"line\"><span style=\"color: #616E88\"># Example 1:</span></span>\n<span class=\"line\"><span style=\"color: #616E88\">#</span></span>\n<span class=\"line\"><span style=\"color: #616E88\">#</span></span>\n<span class=\"line\"><span style=\"color: #616E88\"># Input:</span></span>\n<span class=\"line\"><span style=\"color: #616E88\"># 11110</span></span>\n<span class=\"line\"><span style=\"color: #616E88\"># 11010</span></span>\n<span class=\"line\"><span style=\"color: #616E88\"># 11000</span></span>\n<span class=\"line\"><span style=\"color: #616E88\"># 00000</span></span>\n<span class=\"line\"><span style=\"color: #616E88\">#</span></span>\n<span class=\"line\"><span style=\"color: #616E88\"># Output: 1</span></span>\n<span class=\"line\"><span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Solution</span><span style=\"color: #ECEFF4\">:</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">def</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">numIslands</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #81A1C1\">self</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">grid</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> List</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #D8DEE9FF\">List</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #88C0D0\">str</span><span style=\"color: #ECEFF4\">]])</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">-></span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">int</span><span style=\"color: #ECEFF4\">:</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"\"\"</span></span>\n<span class=\"line\"><span style=\"color: #A3BE8C\">        :type grid: List[List[str]]</span></span>\n<span class=\"line\"><span style=\"color: #A3BE8C\">        :rtype: int</span></span>\n<span class=\"line\"><span style=\"color: #A3BE8C\">        </span><span style=\"color: #ECEFF4\">\"\"\"</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #81A1C1\">if</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">not</span><span style=\"color: #D8DEE9FF\"> grid </span><span style=\"color: #81A1C1\">or</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">not</span><span style=\"color: #D8DEE9FF\"> grid</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #B48EAD\">0</span><span style=\"color: #ECEFF4\">]:</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">            </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        num_count </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #81A1C1\">for</span><span style=\"color: #D8DEE9FF\"> i </span><span style=\"color: #81A1C1\">in</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">range</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #88C0D0\">len</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">grid</span><span style=\"color: #ECEFF4\">)):</span><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #616E88\"># &#x3C;-- x</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">            </span><span style=\"color: #81A1C1\">for</span><span style=\"color: #D8DEE9FF\"> j </span><span style=\"color: #81A1C1\">in</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">range</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #88C0D0\">len</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">grid</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #D8DEE9FF\">i</span><span style=\"color: #ECEFF4\">])):</span><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #616E88\"># &#x3C;-- y</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">                </span><span style=\"color: #81A1C1\">if</span><span style=\"color: #D8DEE9FF\"> grid</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #D8DEE9FF\">i</span><span style=\"color: #ECEFF4\">][</span><span style=\"color: #D8DEE9FF\">j</span><span style=\"color: #ECEFF4\">]</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">==</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">1</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">:</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">                    </span><span style=\"color: #81A1C1\">self</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">bfs</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">grid</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> i</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> j</span><span style=\"color: #ECEFF4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">                    num_count </span><span style=\"color: #81A1C1\">+=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> num_count</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">def</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">bfs</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #81A1C1\">self</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">grid</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">r</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">c</span><span style=\"color: #ECEFF4\">):</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        queue </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> collections</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">deque</span><span style=\"color: #ECEFF4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        queue</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">append</span><span style=\"color: #ECEFF4\">((</span><span style=\"color: #D8DEE9FF\">r</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> c</span><span style=\"color: #ECEFF4\">))</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        grid</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #D8DEE9FF\">r</span><span style=\"color: #ECEFF4\">][</span><span style=\"color: #D8DEE9FF\">c</span><span style=\"color: #ECEFF4\">]</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">0</span><span style=\"color: #ECEFF4\">\"</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #81A1C1\">while</span><span style=\"color: #D8DEE9FF\"> queue</span><span style=\"color: #ECEFF4\">:</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">            directions </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">[(</span><span style=\"color: #B48EAD\">0</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">),</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #B48EAD\">0</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">-</span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">),</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #81A1C1\">-</span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span><span style=\"color: #ECEFF4\">),</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span><span style=\"color: #ECEFF4\">)]</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">            r</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> c </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> queue</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">popleft</span><span style=\"color: #ECEFF4\">()</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">            </span><span style=\"color: #81A1C1\">for</span><span style=\"color: #D8DEE9FF\"> d </span><span style=\"color: #81A1C1\">in</span><span style=\"color: #D8DEE9FF\"> directions</span><span style=\"color: #ECEFF4\">:</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">                nr</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> nc </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> r </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> d</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #B48EAD\">0</span><span style=\"color: #ECEFF4\">],</span><span style=\"color: #D8DEE9FF\"> c </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> d</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">]</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">                </span><span style=\"color: #81A1C1\">if</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">self</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">is_valid</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">grid</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> nr</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> nc</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">and</span><span style=\"color: #D8DEE9FF\"> grid</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #D8DEE9FF\">nr</span><span style=\"color: #ECEFF4\">][</span><span style=\"color: #D8DEE9FF\">nc</span><span style=\"color: #ECEFF4\">]</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">==</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">1</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">:</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">                    queue</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">append</span><span style=\"color: #ECEFF4\">((</span><span style=\"color: #D8DEE9FF\">nr</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> nc</span><span style=\"color: #ECEFF4\">))</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">                    grid</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #D8DEE9FF\">nr</span><span style=\"color: #ECEFF4\">][</span><span style=\"color: #D8DEE9FF\">nc</span><span style=\"color: #ECEFF4\">]</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">0</span><span style=\"color: #ECEFF4\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">def</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">is_valid</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #81A1C1\">self</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">grid</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">r</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">c</span><span style=\"color: #ECEFF4\">):</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        m</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> n </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">len</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">grid</span><span style=\"color: #ECEFF4\">),</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">len</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">grid</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #B48EAD\">0</span><span style=\"color: #ECEFF4\">])</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #81A1C1\">if</span><span style=\"color: #D8DEE9FF\"> r </span><span style=\"color: #81A1C1\">&#x3C;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">or</span><span style=\"color: #D8DEE9FF\"> c </span><span style=\"color: #81A1C1\">&#x3C;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">or</span><span style=\"color: #D8DEE9FF\"> r </span><span style=\"color: #81A1C1\">>=</span><span style=\"color: #D8DEE9FF\"> m </span><span style=\"color: #81A1C1\">or</span><span style=\"color: #D8DEE9FF\"> c </span><span style=\"color: #81A1C1\">>=</span><span style=\"color: #D8DEE9FF\"> n</span><span style=\"color: #ECEFF4\">:</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">            </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">False</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">True</span></span></code></pre>";

				const frontmatter = {"title":"Going Broad in a graph","date":"2019-10-20T22:40:32.169Z","template":"post","draft":false,"slug":"intro-to-bfs","category":"algorithms","tags":["data-structures","algorithms","bfs"],"description":"Going broad in a graph: Introduction to Breadth First Search","socialImage":""};
				const file = "/Users/eleijonmarck/dev/eleijonmarck/better-bar/src/data/blog-posts/2019-10-20---intro-to-bfs.md";
				const url = undefined;
				function rawContent() {
					return "# Introduction to BFS (breadth first search)\n\nAs always we want to start of by talking about why we would actually be learning this material. BFS is a algorithm used to traverse a set of paths to find the \"shortest path\" to something in a graph problem; solving problems such as minimum steps of solving the Rubik's Cube. Do not get discouraged because of solving it as a graph; since most problems can be converted into a graph problem and sometimes in a few steps. Why are we getting the \"shortest\" path tough; we are searching on a broad approach and exploring the field within that level fully before actually traversing to the next level of depth of a problem. For example analyzing networks, mapping routes, and scheduling are graph problems.\n\n![hackerearth](images/bfs/bfs_level_traversal.jpg)\n\n> BFS is a algorithm used to traverse a set of paths to find the \"shortest path\" to something in a graph problem; solving problems such as minimum steps of solving the Rubik's Cube\n\n---\n## BFS vs DFS\nThe act of searching or traversing through a graph data structure is fairly simple: it just means that we’re probably visiting every single vertex (and by proxy, every single edge) in the graph. At it’s very core, the only difference between traversing a graph by breadth or by depth is the order in which we visit the vertices in a graph. In other words, the order in which the vertices of a graph are visited is actually how we can classify different graph traversal algorithms.\nIn both tree and graph traversal, the DFS algorithm uses a stack data structure. By comparison, the breadth-first search algorithm traverses broadly into a structure, by visiting neighboring sibling nodes before visiting children nodes. In both tree and graph traversal, the BFS algorithm implements a queue data structure.\n\n![bfs_vs_dfs](images/bfs/bfs_vs_dfs.jpeg)\n\n> In both tree and graph traversal, the DFS algorithm uses a stack data structure. By comparison, the breadth-first search algorithm traverses broadly into a structure, by visiting neighboring sibling nodes before visiting children nodes. In both tree and graph traversal, the BFS algorithm implements a queue data structure.\n\n## Algorithm\nThe backbone of a breadth-first search consists of these basic steps:\n* Add a node/vertex from the graph to a queue of nodes to be “visited”.\n* Visit the topmost node in the queue, and mark it as such.\n* If that node has any neighbors, check to see if they have been “visited” or not.\n* Add any neighboring nodes that still need to be “visited” to the queue.\n* Remove the node we’ve visited from the queue.\n\n## Real world example\n```python\n# [200] Number of Islands\n#\n# https://leetcode.com/problems/number-of-islands/description/\n#\n# algorithms\n# Medium\n#\n# Given a 2d grid map of '1's (land) and '0's (water), count the number of\n# islands. An island is surrounded by water and is formed by connecting\n# adjacent lands horizontally or vertically. You may assume all four edges of\n# the grid are all surrounded by water.\n#\n# Example 1:\n#\n#\n# Input:\n# 11110\n# 11010\n# 11000\n# 00000\n#\n# Output: 1\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        if not grid or not grid[0]:\n            return 0\n\n        num_count = 0\n        for i in range(len(grid)):  # <-- x\n            for j in range(len(grid[i])):  # <-- y\n                if grid[i][j] == \"1\":\n                    self.bfs(grid, i, j)\n                    num_count += 1\n\n        return num_count\n\n\n    def bfs(self, grid, r, c):\n        queue = collections.deque()\n        queue.append((r, c))\n        grid[r][c] = \"0\"\n        while queue:\n            directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]\n            r, c = queue.popleft()\n            for d in directions:\n                nr, nc = r + d[0], c + d[1]\n                if self.is_valid(grid, nr, nc) and grid[nr][nc] == \"1\":\n                    queue.append((nr, nc))\n                    grid[nr][nc] = \"0\"\n\n    def is_valid(self, grid, r, c):\n        m, n = len(grid), len(grid[0])\n        if r < 0 or c < 0 or r >= m or c >= n:\n            return False\n        return True\n```\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"introduction-to-bfs-breadth-first-search","text":"Introduction to BFS (breadth first search)"},{"depth":2,"slug":"bfs-vs-dfs","text":"BFS vs DFS"},{"depth":2,"slug":"algorithm","text":"Algorithm"},{"depth":2,"slug":"real-world-example","text":"Real world example"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
