import { h as createVNode, F as Fragment } from './astro.98e1a385.mjs';
import 'html-escaper';
import 'cookie';
import 'kleur/colors';
import 'slash';
import 'path-to-regexp';
import 'mime';
import 'string-width';

const html = "<h1 id=\"algorithms-string-manipulation\">Algorithms: string manipulation</h1>\n<p>A window function can be used to reduce complexity when one needs to interact over multiple elements in a array. Example here is <a href=\"https://leetcode.com/problems/longest-repeating-character-replacement/\" target=\"_blank\" rel=\"nofollow\">leetcode#424</a> where we need to calculate the longest repeating character over some array. Also we can add replacements of the array to make it longer, but this is really just an add on; the meat of the bone is the window function algorithm.</p>\n<h3 id=\"problem\">Problem</h3>\n<p>Given a string s that consists of only uppercase English letters, you can perform at most <code>k</code> operations on that string.\nIn one operation, you can choose any character of the string and change it to any other uppercase English character.\nFind the length of the longest sub-string containing all repeating letters you can get after performing the above operations.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #2e3440ff; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #d8dee9ff\">Input:</span></span>\n<span class=\"line\"><span style=\"color: #d8dee9ff\">s = \"AABABBA\", k = 1</span></span>\n<span class=\"line\"><span style=\"color: #d8dee9ff\"></span></span>\n<span class=\"line\"><span style=\"color: #d8dee9ff\">Output:</span></span>\n<span class=\"line\"><span style=\"color: #d8dee9ff\">4</span></span>\n<span class=\"line\"><span style=\"color: #d8dee9ff\"></span></span>\n<span class=\"line\"><span style=\"color: #d8dee9ff\">Explanation:</span></span>\n<span class=\"line\"><span style=\"color: #d8dee9ff\">Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".</span></span>\n<span class=\"line\"><span style=\"color: #d8dee9ff\">The substring \"BBBB\" has the longest repeating letters, which is 4.</span></span></code></pre>\n<h3 id=\"solution\">Solution</h3>\n<p>Creating a window that moves based on criteria and that stores the information we need.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #2e3440ff; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #ECEFF4\">\"\"\"</span></span>\n<span class=\"line\"><span style=\"color: #A3BE8C\">window:</span></span>\n<span class=\"line\"><span style=\"color: #A3BE8C\">i - increment i once we have reached k replacements of the characters</span></span>\n<span class=\"line\"><span style=\"color: #A3BE8C\">j - increment j while we have replacements to make</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A3BE8C\">A A B A B B A</span></span>\n<span class=\"line\"><span style=\"color: #A3BE8C\">i</span></span>\n<span class=\"line\"><span style=\"color: #A3BE8C\">  j</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A3BE8C\">variables:</span></span>\n<span class=\"line\"><span style=\"color: #A3BE8C\">current_max_letter_count - current consecutive letters found</span></span>\n<span class=\"line\"><span style=\"color: #A3BE8C\">global_max_count - global count of the consecutive letters found</span></span>\n<span class=\"line\"><span style=\"color: #A3BE8C\">letter_count - hashmap of nb of occurenes currently in the window</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">\"\"\"</span></span></code></pre>\n<p>The code will then consist of two while loops where we traverse j until the end.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #2e3440ff; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #D8DEE9FF\">max_letter_count </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">global_max_count </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">letter_count </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">i </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">j </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span></span>\n<span class=\"line\"><span style=\"color: #81A1C1\">while</span><span style=\"color: #D8DEE9FF\"> j </span><span style=\"color: #81A1C1\">&#x3C;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">len</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">s</span><span style=\"color: #ECEFF4\">):</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #616E88\"># initialize the char key for each char meet</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">if</span><span style=\"color: #D8DEE9FF\"> s</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #D8DEE9FF\">j</span><span style=\"color: #ECEFF4\">]</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">not</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">in</span><span style=\"color: #D8DEE9FF\"> letter_count</span><span style=\"color: #ECEFF4\">:</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        letter_count</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #D8DEE9FF\">s</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #D8DEE9FF\">j</span><span style=\"color: #ECEFF4\">]]</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #616E88\"># increment seen characters</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    letter_count</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #D8DEE9FF\">s</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #D8DEE9FF\">j</span><span style=\"color: #ECEFF4\">]]</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #616E88\"># max number of letters, checking from previous max letter to increased letter count</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #616E88\"># max_letter_count = max(max_letter_count, letter_count[s[j]])</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    max_letter_count </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">max</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">max_letter_count</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> letter_count</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #D8DEE9FF\">s</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #D8DEE9FF\">j</span><span style=\"color: #ECEFF4\">]])</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #616E88\"># characters_in_window = j - i + 1</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    characters_in_window </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> j </span><span style=\"color: #81A1C1\">-</span><span style=\"color: #D8DEE9FF\"> i </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #616E88\"># replaced_characters = (j - i + 1) - max_letter_count</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">while</span><span style=\"color: #D8DEE9FF\"> characters_in_window </span><span style=\"color: #81A1C1\">-</span><span style=\"color: #D8DEE9FF\"> max_letter_count </span><span style=\"color: #81A1C1\">></span><span style=\"color: #D8DEE9FF\"> k</span><span style=\"color: #ECEFF4\">:</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        letter_count</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #D8DEE9FF\">s</span><span style=\"color: #ECEFF4\">[</span><span style=\"color: #D8DEE9FF\">i</span><span style=\"color: #ECEFF4\">]]</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">-=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        i </span><span style=\"color: #81A1C1\">+=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">        </span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    global_max_count </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">max</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">global_max_count</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> characters_in_window</span><span style=\"color: #ECEFF4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    j </span><span style=\"color: #81A1C1\">+=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> global_max_count</span></span></code></pre>\n<p>Video explanation coming shortly</p>";

				const frontmatter = {"title":"Algorithms: Window Functions","date":"2019-09-25T22:40:32.169Z","template":"post","draft":false,"slug":"algorithms-window-function","category":"algorithms","tags":["leetcode","algorithms"],"description":"Tricks for string manipulation handling","socialImage":""};
				const file = "/Users/eleijonmarck/dev/eleijonmarck/better-bar/src/data/blog-posts/2019-09-18---algorithms-window-function.md";
				const url = undefined;
				function rawContent() {
					return "\n# Algorithms: string manipulation\n\nA window function can be used to reduce complexity when one needs to interact over multiple elements in a array. Example here is [leetcode#424](https://leetcode.com/problems/longest-repeating-character-replacement/) where we need to calculate the longest repeating character over some array. Also we can add replacements of the array to make it longer, but this is really just an add on; the meat of the bone is the window function algorithm.\n\n### Problem\nGiven a string s that consists of only uppercase English letters, you can perform at most `k` operations on that string.\nIn one operation, you can choose any character of the string and change it to any other uppercase English character.\nFind the length of the longest sub-string containing all repeating letters you can get after performing the above operations.\n\n```\nInput:\ns = \"AABABBA\", k = 1\n\nOutput:\n4\n\nExplanation:\nReplace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\n```\n\n### Solution\n\nCreating a window that moves based on criteria and that stores the information we need.\n```python\n\"\"\"\nwindow:\ni - increment i once we have reached k replacements of the characters\nj - increment j while we have replacements to make\n\nA A B A B B A\ni\n  j\n\nvariables:\ncurrent_max_letter_count - current consecutive letters found\nglobal_max_count - global count of the consecutive letters found\nletter_count - hashmap of nb of occurenes currently in the window\n\"\"\"\n```\n\nThe code will then consist of two while loops where we traverse j until the end.\n\n```python\nmax_letter_count = 0\nglobal_max_count = 0\nletter_count = {}\n\ni = 0\nj = 0\nwhile j < len(s):\n\n    # initialize the char key for each char meet\n    if s[j] not in letter_count:\n        letter_count[s[j]] = 0\n    \n    # increment seen characters\n    letter_count[s[j]] += 1\n\n    # max number of letters, checking from previous max letter to increased letter count\n    # max_letter_count = max(max_letter_count, letter_count[s[j]])\n    max_letter_count = max(max_letter_count, letter_count[s[j]])\n\n    # characters_in_window = j - i + 1\n    characters_in_window = j - i + 1\n    # replaced_characters = (j - i + 1) - max_letter_count\n    while characters_in_window - max_letter_count > k:\n        letter_count[s[i]] -= 1\n        i += 1\n        \n    global_max_count = max(global_max_count, characters_in_window)\n    j += 1\n\nreturn global_max_count\n```\n\nVideo explanation coming shortly";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"algorithms-string-manipulation","text":"Algorithms: string manipulation"},{"depth":3,"slug":"problem","text":"Problem"},{"depth":3,"slug":"solution","text":"Solution"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
