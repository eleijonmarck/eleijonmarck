(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{220:function(e){e.exports={data:{post:{title:"Generative models for dummy text generation",path:"/generative-models-for-dummy-text-generation",date:"3. March 2019",timeToRead:1,tags:[{id:"nlp",title:"nlp",path:"/tag/nlp"},{id:"dummy-data",title:"dummy-data",path:"/tag/dummy-data"}],description:"Dummy text generation for mock data",content:'<p>Recently I went to Stockholm AI <a href="https://www.eventbrite.co.uk/e/study-group-13-speech-recognition-and-deep-generative-models-tickets-56243370435?fbclid=IwAR1o_9Aa4FtsgPubMDR43c5yjjmbwJ_OotGKl2_6wgNtDBiTRuivSKIgty0" target="_blank" rel="nofollow noopener noreferrer">study group</a>; where <a href="http://www.csc.kth.se/~butepage/" target="_blank" rel="nofollow noopener noreferrer">Judith</a>  presented a talk on generative models. This gave me an idea to generate dummy data based on a learned distribution by a generative model that serves as the dummy data creator.</p>\n<p> tldr;</p>\n<p>You want to generate text? </p>\n<p><code class="language-text">pip install textgen</code> :rocket:</p>\n<h2 id="generative-model"><a href="#generative-model" aria-hidden="true"><span class="icon icon-link"></span></a>Generative model</h2>\n<p>A generative model is basically a overfitted model for trying to describe the underlying data and being able to generate predictions based on it.</p>\n<p>I wanted to build a simple model in keras but as with every python implementation, there is usually always a python package for that, as with <a href="https://github.com/minimaxir/textgenrnn" target="_blank" rel="nofollow noopener noreferrer">minimaxir/textgen</a>. </p>\n<p>I prepared for myself some handy little snippets and docker file for getting everything setup, as had to get randomly generated data for a multitude of various sources and found that I would provide a simple snippet to interact with this wonderful package. </p>\n<p>If you have not used keras/deep learning but want to get it setup and use it. In the repo there is documentation on how to get started </p>\n<p><a href="https://github.com/eleijonmarck/data-generator" target="_blank" rel="nofollow noopener noreferrer">eleijonmarck/data-generator</a> </p>\n<ol>\n<li>Get the data to <code class="language-text">sample-datasets</code>, with a <code class="language-text">column_name</code> and the text data you want to generate.</li>\n<li>Train the generator using the <code class="language-text">textgen/train-textgen.py</code> or <code class="language-text">make example-train</code></li>\n</ol>\n',coverImage:{type:"image",mimeType:"image/gif",src:"/assets/static/textgen_example.4f4498b.b78dc0b.gif",size:{width:600,height:368},sizes:"(max-width: 600px) 100vw, 600px",srcset:["/assets/static/textgen_example.a67b0b2.b78dc0b.gif 480w","/assets/static/textgen_example.4f4498b.b78dc0b.gif 600w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 600 368' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-10'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-10)' width='600' height='368' xlink:href='data:image/gif%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAnCAYAAAC/mE48AAAACXBIWXMAAAPoAAAD6AG1e1JrAAAHZklEQVRo3u1Z2XYbxxXE7BtmBstgB0ESJLhhN0XRkkwpeojzEh8/JEefpV%2buVDUwEiXLtBgTkhPy4Z7umV7Q93Z13epB5d/Xl/j1lzmWb1eYndNmSyxWayyWa8zmrC9XmC82NpsvMFts2tWm5/liU5ZtH/suTZvqmuNiOsePL17i5vUbvPrpxtiLly9N%2bfrNG/x089rYi1evMOdvmzXs2FbrS1SCdgC/5aNSqaB1XaD1rIWKV4EbeGj0egiTGLVWC3lRoNZuo97pwAsCU9e7rNlEzna9T%2bt1867KMtu2RdUq4ixDMRgga9Q3ZbNh5mx0u6bUuDCO0eTv%2bZxba7Esy5RfNKvy%2b21fYeXcYRSi4tZcuKlrXlSPqkjHGV9WYLsOkjyH43lI6YjqclqLdTzfOKl6Uquh2NszQVCfMEmMM2mjgYSOR9XEBKEMlsbJIvbLtkHVGPVp9vtwXPdPOXcfC8JAwbR%2bG1V/g4Bmt484SU3ZaHfR2x%2bjNRyi3ioMMspFW7ZtgiEHhRqDCjpXsC1n3yhNEcQbJLUZrDqdbo9GRETDIKfgnJrXD0PkHNsf83eIlNZwYAKrMUJHjXM%2bZABC/l7Fsm9Bzf1olmPBrXlw6x6CZoSwiJH0qgjTDEFjADdO4XK3yh1T6RItHict63Ja5mz7yfSsIyRn1Ufv/ChCQLMdx7QLEZ7vm35CoMu6TO0PjwDrswA4GwQIEe6ei%2bgqhDd3Ye/ZcFp8H4QIL36G0zz8ZlB1iLDdHIHwswDIeXsbAPtrCMf6JgHwuft3kuKDI8DbOu5%2bzr5fsRP2w7P2bknwSwEINqU7ceAeuAjXPNc1C/7oGuHinwhO/oZw%2bg9EP/wL0fRnBAdX8C/%2bDre/hF3jxNMQ/orn9pTne%2bKhwneD3oB5d4XTszMsl0tqgh%2bxXq9xOD7E%2boc1RiTF7x%2bA8gi4m12zPAt2wLOfObBEjF4MO%2b/CDlM4eR9u%2bxhOUoftJ5sySM0c6u8WHJNYHLOZ1yOZ1eo1RCS7GlPngCyfKjuQ6BKmyuBr8n%2bZx3cWAO8WAv6isH34NHg7APZHBNiujTbz9Zg5eXIywR5z8ZC5Wsw5OTlBhyrOZ0bIKHa0e/v7%2b8i5s1meGVgfHR9hwDweM631mMM1tk9d0B/0TV/tfos5XtA/OT1Bl/MJHWrX72oOoaRKraG1Jb6NIrbRz1yMmJ4HRFk7sRETpf3U5js%2bVx30WO%2bY0kUtrKCRUWRxDfcmQemD48kE8/kcq9XSLHa4NzQOatGtdgs205MW6DA/K1CCeIfCRmdcDsuROgWS%2bssZtck0T8H5THAnxzg4ODDzl8EbMXBDBrzodJHnNaM8tT45fEBdMm4Exsk2j1g9srBP58cNFx06rfqQQRrmFHJs0wYk1BX34wB/I4RGeyPudAdnJK7ZfIbpdIq3b98a5zSxdlG7eXp2aqIsMlssFjghQjLKYu38%2bfk5xkdj0%2b/w8BCXl5d4/vy5QdVsNjPzCAEKRs4xBppcw5iOHNUt4/C0E9IxiiiuaZ/Pk6aHo4aPLLC40w4uB0RlQXlOlAxrgQlAFvloFK176gD7UxL0GHmdEy1M1qB0LShHFVGRmkwEpmNQZTC6vS5S1mO2J0RGg5ceBUn90yzlEcnRpNRVYDRGpncqFQgdpZIMY99BHjmIPJuO2ghdCw7XJCfzQGYh4DplKeuJb8HjBsbsH7Gv/Irk4L0C4G2dDx8HCX4ZAdbmKIgEdVvTRcfd6nLpc11XVS/1ufS8NHqVBBhzt9PylkjEiCPKcWV/PWtOXZF1SfprCaESASwd3zUB0Hst3OTfW5cROXHbfF1i6FBI6Ed0PiYhfgys/eHio9JcvfUN4HfI6fshoCRBb4OAYX9gCOzw8OADYZ2dn%2bHy2aXhgpy7qPMtFp9eXOCYqe%2bI/ddSfCcbYjsjQU6YTQZMb84D3%2bZ2owSdLQoYiJK8VIrQpODklFKgcrYI0hAh2xWQkvmV9tRX5KZSqVBkaN%2b%2b1VnWJ6pvF5edP3cXsB8DCQZ3k6DEicSMdlWmDyBKYxIy2nUJHyFD4kZ9dUS041J1sjJlSjeYuTptU0rtaZ7b4kg6QYjROoQY/a76CGVSkBqn%2bQacq2gWiBsx4jyGvxVJD0uCwUYIaWGSwEbQXJybBT27emaUnnJ%2b0SrM4k5PTw0PyFFpBR0RiSbxhfSDxJSclkBSf41TgNRHQknl1dUVRvsjE2TNI%2bGl/lqD2qRIS4k9OZ6g1qshLVJEQbQDBHhf1gH/DYnZ9/ya8zkX7JIb7r4LEAGCn0zQ9rbpS/31hUaOqa4d03OpDKXk9Cxz/%2bAL710k%2bC1I8c5vgo7nGDYX5AS91Wpl4K0UeH19zWPRxQHT483NDeaL%2bebjBrW%2byulsauCrc/u/qQS9T2FvFB13t/yY4Rn1Z5vUJnSoj96VpXZeZu/oY%2bbulaAQ4DofWPlRpcHyf4LeoIf3799/F4HyXRGg74A6Brqmvnv37pEh4JHZHwbg/z04Twj4TRp8CsATBzwqC58Q8JQG9b3SftRH4D%2bI4GryOP6TdAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e"}}}}}}]);