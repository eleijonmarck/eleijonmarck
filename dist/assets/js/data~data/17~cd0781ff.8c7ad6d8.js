(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{234:function(n){n.exports=JSON.parse('{"data":{"tag":{"title":"probability","belongsTo":{"edges":[{"node":{"title":"Calculating the Probability of some Event (E)","path":"/calculating-the-probability-of-some-event-e","date":"17. June 2019","timeToRead":3,"description":"How to calculate the Probability of an event occuring by also using the Z-score","coverImage":null,"content":"<p>Probability can be used to describe the relationship between given values and the chance/probability of some event occuring.\\nThis post will outline how we describe probability of some event given a fitted distribution.\\nWe will fit a distribution to then calculate the survival function using the z-score of our limit given a fitted distribution.</p>\\n<pre class=\\"language-python\\"><span class=\\"token keyword\\">from</span> scipy <span class=\\"token keyword\\">import</span> stats\\n<span class=\\"token keyword\\">import</span> pandas <span class=\\"token keyword\\">as</span> pd\\n<span class=\\"token keyword\\">import</span> numpy <span class=\\"token keyword\\">as</span> np\\n<span class=\\"token keyword\\">import</span> altair <span class=\\"token keyword\\">as</span> alt\\nalt<span class=\\"token punctuation\\">.</span>data_transformers<span class=\\"token punctuation\\">.</span>enable<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\'json\'</span><span class=\\"token punctuation\\">)</span></pre>\\n<pre class=\\"language-text\\">DataTransformerRegistry.enable(&#39;json&#39;)</pre>\\n<pre class=\\"language-python\\">df <span class=\\"token operator\\">=</span> pd<span class=\\"token punctuation\\">.</span>read_csv<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\'example_parameter.csv\'</span><span class=\\"token punctuation\\">)</span></pre>\\n<h1 id=\\"maximum-likelihood-estimate\\"><a href=\\"#maximum-likelihood-estimate\\" aria-hidden=\\"true\\"><span class=\\"icon icon-link\\"></span></a>maximum likelihood estimate</h1>\\n<p>In essence we either try distributions until it fits the data the best, or we know a analytical solution for the distribution at hand and get the best fitted distribution of the data right away.</p>\\n<pre class=\\"language-python\\">mu<span class=\\"token punctuation\\">,</span> std <span class=\\"token operator\\">=</span> stats<span class=\\"token punctuation\\">.</span>norm<span class=\\"token punctuation\\">.</span>fit<span class=\\"token punctuation\\">(</span>df<span class=\\"token punctuation\\">)</span>\\nmu<span class=\\"token punctuation\\">,</span> std</pre>\\n<pre class=\\"language-text\\">(5.669365294764912, 1.7405441476684247)</pre>\\n<pre class=\\"language-python\\"><span class=\\"token comment\\"># x between -3 and above with .001 steps.</span>\\nx_axis <span class=\\"token operator\\">=</span> np<span class=\\"token punctuation\\">.</span>arange<span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token operator\\">-</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> \\n    mu <span class=\\"token operator\\">+</span> <span class=\\"token number\\">5</span> <span class=\\"token operator\\">*</span> std<span class=\\"token punctuation\\">,</span> \\n    <span class=\\"token number\\">0.001</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\"># Mean = mu, SD = std.</span>\\ny_axis <span class=\\"token operator\\">=</span> stats<span class=\\"token punctuation\\">.</span>norm<span class=\\"token punctuation\\">.</span>pdf<span class=\\"token punctuation\\">(</span>\\n    x_axis<span class=\\"token punctuation\\">,</span>\\n    mu<span class=\\"token punctuation\\">,</span>\\n    std\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\"># plot</span>\\ndf <span class=\\"token operator\\">=</span> pd<span class=\\"token punctuation\\">.</span>DataFrame<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\ndf<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\'x\'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> x_axis\\ndf<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\'y\'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> y_axis\\nalt<span class=\\"token punctuation\\">.</span>Chart<span class=\\"token punctuation\\">(</span>data<span class=\\"token operator\\">=</span>df<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>mark_line<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>encode<span class=\\"token punctuation\\">(</span>\\n    x<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'x:Q\'</span><span class=\\"token punctuation\\">,</span>\\n    y<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'y:Q\'</span>\\n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>properties<span class=\\"token punctuation\\">(</span>\\n    title<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'Probability\'</span>\\n<span class=\\"token punctuation\\">)</span></pre>\\n<p><img class=\\"g-image g-image--lazy g-image--loading\\" src=\\"data:image/svg+xml,%3csvg fill=\'none\' viewBox=\'0 0 453 364\' xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\'%3e%3cdefs%3e%3cfilter id=\'__svg-blur-1\'%3e%3cfeGaussianBlur in=\'SourceGraphic\' stdDeviation=\'40\'/%3e%3c/filter%3e%3c/defs%3e%3cimage x=\'0\' y=\'0\' filter=\'url(%23__svg-blur-1)\' width=\'453\' height=\'364\' xlink:href=\'data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAzCAYAAAAn3w6xAAAACXBIWXMAAAsSAAALEgHS3X78AAASvklEQVRo3s1aCXhURbbuJenupLN1VtLp9N6BJIaQHUICCfhA3oCCI8t76sPxvYfjwiqDIApESAhLEAIIYxgCEpIgiwwEWQQlAypbAtnoLOybGEHFcZxNv55zLqf6K25uh2Z4n/PyfSe3%2btyqc6vq1jnn/6uuTPav%2bwsB0VLZh65yKgeAqDjdz/YnZ1JdXS1raWmRnT9/Xnbu3Ll7RKyTqiMlhw8flk2dOlUYkFwunwQyDWQK/FwI1zkgxVBehnq4lioUisFYd9CgQYrjx4979YwH7de/8g/fsBrEAmIF6QliIwkG6U26n%2b0Pl14vkHiQPjU1NUGwAkJhlkKYwIyihIHoqCwI3AuFayiVQ7iruy6vv3z5cqjL5Qoi0YD4gfjTVQ2ipat/Y2Nj%2bMWLF0P4fpCE8XZJQqkvfN%2bEuuL21C8NPwFKHDwsvwyciFWrVqXX19ebL126FA0N9CAxID2gUTZcY%2bEq6OAaCdcEkFSQCKrnrgsSC2VmQw%2b/sdzf6XQa2lpb9afqzxhdf7kU8n3nRUdjU3NqfX1dVHNzs%2bH06dOGpqYmPT3PwNpzfenP2cTf2I/eJJFUh9Xvz7enPuAYEjwuhwULFpik9NDQJKELwMFL6I3e2DCNW2OevHzPQJfrj0HePK%2bbfujw7T6ADas4AGq0Wq0f%2bmZxcbGtrKxMiMTwtuRQWQheMGt2KCsxwIDIyRAuvRi6r%2bD0dij7sLokqHdU7T2OK0725Bvv24fNqMp7fuHOYZOW12Shbs22I8qLF867n0c2eRvYHwfZwrKCnheFb5/vB4mDb0u2cAx2fgJ8QbLBBTDy5oML9Af/iwf/s%2bJAaDBWkEFQjgOxUefMIGnwG5eqiTqG9S1UtydXFwXLg9vaOxxff3nVPGXFngnHT7c4rl%2b91GfeugMzOzrOmak9ivA8GoCN9YP6MhjtcjoT6LLgmglXE3sePXswtXHrqF%2bPiFeFn0qlwiWkWbx4sbW0tFRYAZgO2QogQ1IrQE9lOdPTA9kKcNfHweN1xKxq/ROvb8nHssv1Y%2bDMd/b%2bMv2FcgP%2bXrv9qIJbcQrOBnuGnf9Nz47kVoCcu2%2bnlcLbUKDeYwwoKioyPkgMAKNdYgDoJG20ONsx9cnypmxKy/x1eezdCfjev/i9j5PSJpRniGx4HQMwsj9IDMAVLU6DceACuCySSkpKssAFzOACei6yR0Oj/hTZmR79LgF0qfQGDCwLoFvgJHB1hcjc3nEu509f34h6uWT30x99esbeeeNyxKWLFxIbW9oyJiz%2b/ehmZ5sBYkAMF8ENLOtQ5kFhkR3LBspGQhagsoHVRRvUhrXHdkZxFsAJSIQJyMQJWLRoUXJdXV0E5OxgLn8GQaMUyrdMH0BxoBeIlr0FkECsSznYbaO1rSP4y%2buXe0OgM/%2bq6IPHXa6f/OsanYEwaLvrx9ux/1mwfVjJ5k9sLtd3AVgX2qRQdA8W4ZFUkGAq430tF2e0LCOQpIraBpPbegZaCxcuNEdFRSkklpNFYinhxERJ6HFiuth2/eUr/eCpFZZ/e3VzKtM1tLQCOPopMPl/fmcDfSJnw%2bJh%2bUr1A8FRmDd1SW8T65QRERGYDeQwASYpIoKDkpoAFnzuV/euv/858rHfVGZDwHNP2tnWdp2AA3KKg%2bFeDjfhZg%2bdl%2bqHgEi97Yd4AnDgueACaXB9dMmSJbkQ/eMuXLhgxreOKYnSXB6lFkxzqMN40AfKfalsZXVBl0dRnNmwQJqzXLl0ccD0VR8%2bs6e2PrHzxhUTxASME2kXLpzPqG90mqeW7hnvbG23Qhy453nMBqXYPOoD6xsiu3QUKlvZfVFdC/UHU2uiGAgF%2bfn5IUXVQhrsdfDgwcBbt26pOjo6NNBAAw1UFPD8QdSIpeG3D0FLC4EPP9SD%2bBJE1rK6MHjA/Xd8P69rTh03b9sTgPXlgAH8CVjFwCoQ3tR/FGwbvnDjoTC47wP3EtEmXNXUB3ZNRB31QUOpOZYGr%2bT0aqqr4QR1%2bFyHxxhQWFjoKQ0aJXQYdMK9hcLv7jianT%2blIlNUN6ihuVWwMXDypt5ZL24wk2t4Wr5S/QjxkAaN3qRBhKZW4ODo%2b5alS5cmnzx5MvLKlStoVMciP0XfcE4XSMstgTJCKJclMPqGEyvTwfLGt6paueUP48EF%2biEThEFjlghEUOJs64jHtz5zzb6sl5ftzkNGCJkgnTKJjhN8RhpFfx1FdOxHHKHUQOqDjlhfGl3dgv0C6SVOgykwAZgaUmECMhsaGkzABnsQg0JhDA/zbjTpIkHiKT1GUL5FfRRIP1yW5CJ6eJsxLtc3YSuqa6eVbqntA9kgHAaI9ZFFJnacO5f8/e3rYVv2n4ib%2bHbNWLgf1t7ewXJ4NOVv1pdsrg96enYS3E%2biMtNHU132W094BvsV/8AuIIXMPLFBT0jwpaW7npGwEcSnsMHTKh69D4p7aDYodgH8U6SkpAi5H4CQbd26dSpYhrLW1lbE1YxxOTDw0ZYSw%2bthjA0SxmZ1MQP4CtthxxsF3fjCD7QjZ28RtrpQx%2bzSKohmHQGOkDd8ZnUErAhz7YkmH8LyTBTUDznxAmYjiuERqsPuO0Tt5RR47VJpEMFJOhChHJ4NEsLCMrKzOMbOGBukZWYi5manlIN1gXWdt8FSd7h%2b6Ixd9f4fcmH5T3K5vjU0O9sdNEmYljIwlTadbbMACox54939Ty2vrh34zZdXc1rbO%2bJEjBLbDCZmydhht2yQb0vteoI8Ik6DwRqNBndktUCGrPPnz/fhlosbPHAz7iYh6GtMJ1U3Zsw7AqgaOr0yYVnl4ZFChb5Fcq4uriI3MIK3bxoyvTLd9dNt/aJNHytFSxffsE2ibxGMlPEIVArx0SqweYwBxcXFlrFjxyql/Ea8m0rYuocUbGZUlf0Nnb457/39J9Il6obyaDJn4ntBAInzIWhG50%2btkN9vN4d0mHHCvfF1cmH3BGABG%2bp9fHxwIBGwAuJra2sDOjs7EQgx8MHAjT8HTJTE/AQgxMAGXxeQnhqWNoCgP/uOnrN12NGTzWkwMBUsbTWBJiUxPRPUU9y8fll96PMG/6fefH/oqQZn8g9f39BQXTUHfhL43/TsWGKOSgZ4SBIIEPFyDxASGCBIMtHhlOXLl%2bOOUBzEADMHPxm8tZHfMggqQGFKj1byf6Eu%2bL8d4e/XX1417vz4VO9ppXuevvXFlWyAujayaSUEl0r%2ba2g%2bC8zQ9W30lBV7nv7kWMPj33ReNaENrh/3wFvOBmKGdEpxVinYTGKm2JPY3YaIWYoMSZETTGG8//J1oePu331f2hAF6a0vBLkoDyjunuULiDBpedXhIR4QqUVCh3Ek1Ju6pLeJT4RkAwYMkDM6DLxA4SUN9YoOD5m%2bObXfyxtNrr/eipbazRHvKqVOWK9/63cfPf0gdBgnwVs6LA6CmAb7gQskwzUDJmAg5H83G6RlZr67rM%2bxTU8r7aykkAvE0kYmCmNydkCAVhh0zIzVe8dt2PVZeueNyzlt7R1iF8BUii4QCzHDBm5iApdJervq8Gwom0Fn5ZY/tsmXcIEM3gW4%2b/mcazKdQ%2bwC%2bOYjVSqVDq46yALIBgOIDaopqPBBUEU6BBQ9KCYoKAAKQRChJtYF//fdf/SM/9i5W0eAf6uQN8CAWJBiNvS0fYbgSAO8AU%2bMlL8G1Ljto5MB3926pqKAxwJfAhfkNNQOB27g%2bsECHl8XRUUM09HdwYjRWxZGW2Hh3dX1GVLinzdlU64nhkdu1MV/x8zdOjDp%2bXUR3rJBJF7eQnJxekR/j1YqlVjZtmLFit7Hjx%2bPAjbI2Bc7J8SlGk6MKowCIGODgXRmx84J0xpb2qKQ9UH073v39MelAVSYwQIW%2bW0QoTncVxRsnG5qDUc2%2bNvtR8dPLd2Ti%2b3O3GWO7BwyjbADsxFICBUlkHTsfhrXLpQ4Q4SYDWIMyIAYMAiuj8EEpJ8%2bfdoIabAHne1F0w5wP27XV08YPp52hcIZW8O6yAZbnO2xLtf3OpiAEYs3fZwK%2bT%2b0vaMjm3Z02ZlhBG18JBNN1UOM0P/tzhfh%2b46cHjZ5ec1oyByh4D7sXC%2bazgyjRTaSSCI4%2b%2bK60dR3dJVu2aCn/XipNBgotSfIszBAdZDORsi7sREi5UYAjGzDZlQO8XZPEN%2buN332hBD5XWHTA2xG4pLrMgHwpoW6xnFrAiH/D%2biuQ7TFHd51A/VOJHCCXEiJ4V68CFzi//QEoAukgQvgUdUQdjwOLhDNH4zQGWB3ByPu43FYxv0B0UXOKTuQO2vNvqEu1990EBPY0XYMd9iB7R5BN2I2cBME2GIM0OG0t9YfHPTaO3sfdbl%2bCIUVYWCHHdzBSLfH43SIEiM6YseMkyAOgnqFQoGgwVBSUoJBELfEgtkHBbRpkcp9cKCjzRALxQEtt20V5GxrT8OPHf67eOfjCzcessJk4GGHcFDBHaAwG%2bzAMoBtdcEEBt%2b8djl57fYjxucX7hzlcv1d29DSqqOtrlTuQwhmw0ESIPowI1XiA4mwbg9GgAo/dBq8fuWiQZa7SDlg0qb8%2b21SekqDwBkEV8ybDDZ6/EZ1HxsPnQbDiQ1GAhnqeeDAgSBggwgc/Gi7W0VbzFoCH35sW5yQlpIAht/Rk03qn/540/bKst1Jz8zfLvj/kRNNWgJJiWz7nGz7UFQ2E5Njz1M72zqScPt8fOEHWeOLPkhBO5/VNftT1tBwdX0IlcZS2Y8DZYlUT8OxVeyLQxwDsuj7gAFr167NgjTYE2KAiYOPbjZIsNhCD0TfzSIUJtRtdraZv/vqWl/w3fHluz5LAUobC0vaQoPMI1jqtkFukUGMkh1imDoATt%2b%2becW04%2bCpRDww%2bft3N2Pw0IQguZk77DCwgxHeBoPv/MFKt2xwzJgxckqD5gc5GpPKAoDl%2bzw%2bq/oxL1NpiAc0aebIVH7Cc2U6%2bsbA4iEL/FNsUJIOG43GhzocfXHprhGQ/y3esDMKbBHdPQ/p9NDplUI8gWxi9/Zw1NMESJ0NYhrEg8mclStXZjc2NqILsLM3xgbzGRsknZGOsAU2iBudgOBiK/YcSyrccOjNv377hQn82ErMkTGyfHIjtw2Cq5nkUjb2PFYXEKUN9wdfXfnhrwAeZ37beS0bJ4HZpdScQWLk9Cj5jKVyfejCBvFtx0AaxJk1QhB07N69W3vnzh0fZHDAztTH6lt8gMXFw4P9Tp45qzrVcFa9/eBJJQy6BxAcC%2bR6JQYsgL4%2bI2dvGb37cF1f%2bO0L7VTEHlXEKOMZK6OrnDBGLJXZPR9Wt77JiVv0ytfX7g8aPWfrOMADwo7u7k/qNEdPNWvWbDuigLRrgDRrAPaoAC6hxj7XNTpV0OeEprsslO%2bDpls2CC5geW78f3XZFL3z1TVjV7SGHzv%2bEHLXTysD/31G1cisFzcYXD/eji6prFV6uaEZ6gFOW/Fsgv8Dt4oC93oh55X3dPf2409BwDWCxTa%2bk%2b5zlxggnA6rVCoMIiEAhW3TZ8zET1llo2ZX%2b4FE5E7cqKvaeyzj2be2RgA%2bDx81e0sP8MvoGas/TJ9btj8vH%2bguBL0RT87eEnnXT509T3x%2bVNhaLysrk%2b3bt094UFtbW9ypU6fkY8eOldXW1gqB9uzZsxFOp1PYKfr000/lu3btEuripsyOHTuEWNS0o1A2bk6VUN62/1jmL16rGjZ8ZvXgJ16vTuj30gZzUflHqUs3HUrq%2bezakKfe3BIGfQkb/lpl2OY9n2UNf3V9ILZbvLZKsDtr1iwfyc/k8CXiJMME5GyqqLCuWLbUNHP%2bsj6TC1YPmFSwun/hyo2jXi1cmztx3qoBrxSsGfzCnDVDJxWWPzOteMNzk%2baVZpYumW9aCVIwv8i%2bYUN5DrBKB2QUW3FxsR1s2vHrs4qKiv7w24GTjPqCggLL%2bvXrk8vLy9OgbF60aJEd9QsWLLBVVlZml5aW2sAG6mywMu1Lly231%2bzcll62osgwraA0a8Lcd3/5/Bu/fXLm0veeemPZxhEvz12dM6Vgde7kglW5U956J6doVcWoeW%2bXJxcXLbBhH5YsWWKtqakxVlVV9epyNAZ/%2bMbke/fuVdBHzH6iQGHkPm9nf/hNgRB9jXn/K%2b/R71nhrfr7%2bxu5T%2bLdp9AajSZO/GBfX18DrL5YsV6tVifS5/P8n79KrclU%2buvUIj2uoBiJT%2bDttO1/D/UPDQ3V3e/T%2bSQ5DWDYpDXy2MRs8Gd5uso/SNAl5I0TlqNS5a%2bXK1UWGrRMq9Uy/IB8W/j8NTg4mM2wL%2bllycnJsoCAgC6dRx1now99Pe7WQabyo486hZeTMvwlIc7Ilb4W%2bIdfmcsyRk6Ul7a7ZI6%2bw6GP8ni5QumOA0qlEl8g7k51nQDooORswBv6P/00HToho8GwaxCIjtf9f/iT/wx2%2bdWS8gDPlT/kOATdPwDnyOBtBBGf4wAAAABJRU5ErkJggg==\' /%3e%3c/svg%3e\\" width=\\"453\\" alt=\\"png\\" data-srcset=\\"/assets/static/output_6_0.e18b67c.f9b7b8a.png 453w\\" data-sizes=\\"(max-width: 453px) 100vw, 453px\\" data-src=\\"/assets/static/output_6_0.e18b67c.f9b7b8a.png\\"><noscript><img class=\\"g-image g-image--lazy g-image--loaded\\" src=\\"/assets/static/output_6_0.e18b67c.f9b7b8a.png\\" width=\\"453\\" alt=\\"png\\"></noscript></p>\\n<p>since we have now fitted a curve around a mu (i.e. not around 0) which is the standard way of showing a distribution.\\nWe will here demonstrate how to calculate the likelihood of being above a certain value based on the data that we have seen using the survival function.</p>\\n<h1 id=\\"2-probability-of-the-survival-function\\"><a href=\\"#2-probability-of-the-survival-function\\" aria-hidden=\\"true\\"><span class=\\"icon icon-link\\"></span></a>2. probability of the survival function</h1>\\n<h3 id=\\"is-the-1---cdf-where-cdf-is-the-cumulative-distribution-function\\"><a href=\\"#is-the-1---cdf-where-cdf-is-the-cumulative-distribution-function\\" aria-hidden=\\"true\\"><span class=\\"icon icon-link\\"></span></a>is the $(1 - cdf)$ where cdf is the cumulative distribution function</h3>\\n<pre class=\\"language-python\\"><span class=\\"token comment\\"># plot</span>\\nx_axis <span class=\\"token operator\\">=</span> x_axis\\n\\ny_axis <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span> <span class=\\"token operator\\">-</span> stats<span class=\\"token punctuation\\">.</span>norm<span class=\\"token punctuation\\">.</span>cdf<span class=\\"token punctuation\\">(</span>x_axis<span class=\\"token punctuation\\">,</span> mu<span class=\\"token punctuation\\">,</span> std<span class=\\"token punctuation\\">)</span>\\n\\ndf <span class=\\"token operator\\">=</span> pd<span class=\\"token punctuation\\">.</span>DataFrame<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\ndf<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\'parameter\'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> x_axis\\ndf<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\'1 - cdf\'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> y_axis\\nline <span class=\\"token operator\\">=</span> alt<span class=\\"token punctuation\\">.</span>Chart<span class=\\"token punctuation\\">(</span>df<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>mark_line<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>encode<span class=\\"token punctuation\\">(</span>\\n    x<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'parameter:Q\'</span><span class=\\"token punctuation\\">,</span>\\n    y<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'1 - cdf:Q\'</span>\\n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>properties<span class=\\"token punctuation\\">(</span>\\n    title<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'Probability of being above limit\'</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\nvertical_y <span class=\\"token operator\\">=</span> np<span class=\\"token punctuation\\">.</span>arange<span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> \\n    <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> \\n    <span class=\\"token number\\">0.001</span>\\n<span class=\\"token punctuation\\">)</span>\\ndf <span class=\\"token operator\\">=</span> pd<span class=\\"token punctuation\\">.</span>DataFrame<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\ndf<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\'vertical_y\'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> vertical_y\\ndf<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\'limit\'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> limit\\n\\nthreshold <span class=\\"token operator\\">=</span> pd<span class=\\"token punctuation\\">.</span>DataFrame<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"threshold\\"</span><span class=\\"token punctuation\\">:</span> limit<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\nrule <span class=\\"token operator\\">=</span> alt<span class=\\"token punctuation\\">.</span>Chart<span class=\\"token punctuation\\">(</span>threshold<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>mark_rule<span class=\\"token punctuation\\">(</span>color<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'firebrick\'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>encode<span class=\\"token punctuation\\">(</span>\\n    alt<span class=\\"token punctuation\\">.</span>X<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\'threshold:Q\'</span><span class=\\"token punctuation\\">,</span> title<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'parameter\'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\nline <span class=\\"token operator\\">+</span> rule</pre>\\n<p><img class=\\"g-image g-image--lazy g-image--loading\\" src=\\"data:image/svg+xml,%3csvg fill=\'none\' viewBox=\'0 0 447 364\' xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\'%3e%3cdefs%3e%3cfilter id=\'__svg-blur-5\'%3e%3cfeGaussianBlur in=\'SourceGraphic\' stdDeviation=\'40\'/%3e%3c/filter%3e%3c/defs%3e%3cimage x=\'0\' y=\'0\' filter=\'url(%23__svg-blur-5)\' width=\'447\' height=\'364\' xlink:href=\'data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA0CAYAAAA62j4JAAAACXBIWXMAAAsSAAALEgHS3X78AAAU%2b0lEQVRo3t1beXgU1bKfmWSWZJZkss6aWTKTZUJCIEAIEPbnckXkouJVEYiKCBoiBGKIEMISwhJEQJ8k74qIhBBEkMUo4BUEgURly54MRAwCAkL0Id4PlzuvqlOddzLp8cb36T%2bvv6%2b%2bc7r6THX16VNVv6rTIxL98Yc/UJgAXwIkA1J58fFcyoz5d4eU5Iio9f/DNBeLxVwzZswY0deXrohuffu16PUdR0VjcreJ/5JTLn44/x3xX%2bdv5/rIu%2b/FjvaRgh1ia8rdftwT%2bPm7QM4qoCdB2iJRB%2bUDrQVaCvz5QAUSiaQXnOdBfyLQDKBlcL4Y2mehnQvtUGhfgzYX2ixoM0HePGgHwvnr0D6NLchJxvsmJiZKzp07Jzp//nyPCcf/WQfOZARQPFAskIv6Vlod6XTdCaQEMtIYC5AZ6BGgKKAEIAeNw2t2IAWd66hV/FFKS2FWDajk6NGjI2%2b2f6/5/lqb%2brV3jkTAm04G6v1AXkWfsfO2cX1489gmQ4v8XtC67p1bZn%2bqeL91RXmVw%2bPx4IOJoBUDyYD8qQ0AkgIFUqsEklNfRn0JkIJ%2bw1%2bTEynpnJejamhoCGptbdXAWw0i0nhRsAAPx8m62K5MJsMJiHnhhRcGHDl61PX9zev6vYe%2bsIydVxGTOn2TdembH6Vnr69MSc/cbL9/3rYYmAAnPHzsis0f3wNm0evenPKUSUvfHTX31coJ%2baX7sws3HniufN/RWM/3X0ac%2bOyk7eyZM4bGxsak%2bvr6fqC0/uzZsxY4j4LWCOfptbW10UDmkydPWurq6ow1NTVxDfX1g2rb2nSfbd0ad2j27EEXPJ7ImlOn4pqamgadOnXK0NzcHAUPYoblrIN2AFAc9A3IAzIBWYCGABmJx/FhjBUoXnApvPLKK5GTJk0K9OZ7PN%2bF4cx349%2b5bvbmnalrClr0xsG%2bA6Zvujttxlt2nv9l63kN3LibkwRelLdNwrn0nNuN5iH6T3B42/39TdivP3hQhg8kIEMPpBDgW4SeE2REC05AcXGxccWKFcHcjTe9I87bsJ/zzg1NLaaz9U1a7D%2b2%2bF2xSPa8KPf1D8WNTS1oiyJYJeLnVu/1I%2bEwWbe5sbBKxox7qQLtWXSqpjG89fx5PY0Rg3JiUjIazqXUF9N1JUwA%2bg3RB%2bnpqj0xMTbsN33%2buRKuWb1lQB9Xg4bnU%2bsH5GDG8g7QD8jRxXHJ5fJQDEvZ2dn2kpISbgKqqqrQu0pIMVxqIdSXkEBsY1AwKsKPBV54bUOziRc%2bLq9ifP9pb8Kk3NLgRPIyGNkOIDl5aJ6nggngHvrAvfeq9yYkcCup%2bYsvVHDNxujBj7cABdH9ef38oXUy9xMT%2bfMT0%2bkE/fz80Dunz5gxY3h1dXXypUuXbG63GxVzkvAhQH3x5qgwCsBr0I7CN0gP4ST76g/8tMbmFtu3V9rsHx0/22t68Z5n2i609oNraTTGSYTyRgLF4bJEuUB2OE8EGn7hxg1z7Z49SccXLhz%2b9S%2b/mN1NTUlwfTiuAkYG2vpQaJNRHumGOuHLQf3spB/PR1/Rq8vST01N5Wby5ZdfNixYsEAjYDPoXIJ6YkvAC4EbRGLf%2bUQJtxzTnnurFzjR0eBHhGSj0n5evABYARgORbtMpsBdRiNny40nTgSgcxOQgU5P5cUT42QKjOXMzsvJebi2qKjIDJPA2e%2bxY8fYZYo30HotJ1xqTiETQKfE2WyzW3Ljm4vcJExbuXty1al6A%2bfMGlskzHh86zJejrcJ7L/rLvVel8vGmwBOmLcJkMcP4v0Iyeo0ARzH83GyvX2AaMSIERKaAP20adMCBWYtEh2TAN8qwMM4283bA5rsN7lw1wCB8ai8N08GE8D5i/8SieTbFYqOKPCPf2AUMAnI0OOq6Yl%2bQitXCrAS4efIZ599dij4gETwAWbwATayUYydA4F6kzO0kQ3iteFk0%2bzYvhiXqW9zA12%2beMFYfbohbfEbB3OvXW7Tt7g5u7SRvGGMr7FRWHSh3/mqvd1Qs2uX61heXvolj8cAPgD56bQi2XsOQrsmXGAjnaJJvyhGZwv5sIQuUUChUKCHD8rPz3ds27ZNh0gLgEogDETyp2WKsywFAYFAAdT2wvjLn%2bN1AhuohD/xAvcePglI7iftSyX7n5hUuNMO8v1O1zYp4Tq%2b0QRoEaHxcpAXCisgDpHh8fz8MIgEXL%2blpiaMHGanbNIPHV4ErhzOf3TopKJJkdNY9B8K9BU4XhAHrFy50gCT4MsJan6vE%2bzqZ%2b4o1277JGXQc2%2blcYyRq8Q9coIGQxcnKARuaNJ77AR9AiGYAP306dOVAogq0vsGxLcK8IKEEF9Lizvo6qWvQgE0DRelFfmxaI13fgyv0wdsBB/wTmBghw84dAjfpskHEgzoiX5CL84fcACmlpa5c%2bcmHThwwN7e3h7c0tKCyy2cnFoiIbZgfDh0cngNCG09lD%2bn6zG4rOl34RQVgsHzx3l%2b/tb%2bzMrdo%2be9/mGqx/OLuqa%2bOQSu90PzQjkkW8vZrdvdF%2bxefWrjRsvhqVP73oC%2bu6EhinxMp2zsk3/ClaRFXdCE0HEjJkEAR7ww0hUdehw7AX7%2b/v6YuoYsW7YsobKyMhYmIAwmQIczy9njuXN96MHCKPlAIToCNngjHfHxBvHQT6IH0tG4MHB88e3XLroK3/woJnPNvglgEsGQN0TAtVRyZGjDOpowG0xA/4t37mhPb9liP/L88/2vejxamAA7Aa1Qeut6eqgU8lNhpAvqZyDnHc7rR7oafSZDy5cv1z/99NOBPkxA2VMTEAqDEA00YAYc/z%2byy%2b4SiQL4mB/lHQbZZKgEkyGZrMMEPvpI9hsm8IckQ4YlS5YEMQL41shjbYYnYgEFw%2bfePDOm0znCkueA0JjcbQPH5lVwDqqx2Y3hyt9L8UCYAE55yAOU71mt3EQ3VVcH8g/FyqZwqvaSIemG%2bP4XKHUBQhKpVIqzHZmTk%2bMoKyvD1FcCuTvOtpzQE9pXBKEvGfeGOhIYXO5S4iGJyZ6j6EZyno%2bTAsiQU/7ZVXscjxTsGEGZpovL/jrCJo7143yJ282huCOZmVrICLmw1XLmjJYwg5juz%2bsXTWYhIRlSCqnxJE9G4RX5Ch4hssnQIGgHzpw5c8jx48d7X7582QJACIVG0xJFoJGMqI0Ahp1uOpImx05OEsemoO1RP5qok/9l63lzXUOzc9a695%2biCDACKJacWDSBGMQXQ7%2b6edNUs3t3r%2bMLFgz9%2btdfTQCEOD7KIz2iqT%2bE/I6FZNgJpo8gAITj7KQrYoYEQRNYvXq1LjMzUyVgMzqhMMjjci8eRoJwHxC5k3/3nK1Dgu5fq/Xcvqovq6ySeI2V82FwM4TBHRoNV3hp%2bOQTfOtmHzglsKdQmDcNjMWzqBjZmQytWbOGS3pOnDjB5ttmPhni821KMJwELMTMWAxNBmYsn7Cghzbw93pwwXbXXdllfTz/umn8pLpG0drqox5wzz2C9QBWNlsPIDMVkUk52RoGUyfo9AE5QH15PFBYWGgAP%2bBrBah7ugLYN%2b3Fj%2bDPox8vUQyb%2bfbIX/77G8Pb71f5CawA7sWUi0SKd0NCuH7j0aMIcc0Cb9ToYwXY/l0UQFswgg8YjD4Aln86vHksiFixIELFBbSxwdDvQ/bpIDvDayMZ%2b3eQDfaj%2bGshnoN8RwrhBktTi9v5w41LlhfWvj/xyGe191%2b/0uZ0dyRI0ZRHoK0Pu3DjBvqARMgHhoEPwIIIArJhlEGy%2bqVDvzeTBNmpIDKSL%2bIw/Fg2GcIkSBYUFIQwUrp48WJraWlpKNYHamtrpUytDh8gjDyulJaXlKorfrSspBSaIvlYTWNYPvf2Ko%2bckmN734vlKesrjtyPJfTdH5/0pyRHzMFpeAE45nBGRlBlairXbz59OohfvhR9pEw%2boeVLXuT55eRcJaSDP%2bkq500Dl90QIA0DhEzgBzhbAljcWWCkJRbMJxPeOMAr3iMy0wnE6lC%2bULJ53wlObp%2bpG0MK/n7wmY67B2NFmcUBnAPb17evcnd0dAcO%2bOwzwaIo%2bSg1i0fIRzlYHoMPHIJRYNWqVbopU6YIIcGI34EEsfwd6oPfDSE%2bvvjdv4pET4p9IcHXEQlKpZ1lcXwZfzQSRByQCm1ydnZ2yqFDh2KvX78eAbmAgTYa0KtjAhJHYMhANzQQPtATz0ARIIEKlOG%2b%2bBglsHLs8fwctPiNg1NWlx3u7/HcDG1sbjGSqUTDBAy4%2bOOPoWfKyx1Hs7JSv/F4Qt2NjdGUO3SRDdSPbJ7Vz0T6RTI8Pa2WeG8kiDMVnp%2bf79q3b5/t1q1bgNtbQmjZqskp2egthhCFksPT8udU2HAQQlQTL5R%2b5yBkxvEBDCHilIM5PDh7feVY7J%2bubQqjXMIEE5B8xeNRniwpMR%2baMiX5O%2bi76%2btNNIlquj%2bvXxIfChFykz8IJ8cbzOjM8%2bN81gMgEggtdZ2PeoBNgCcIhKhO0I1/4lQ9brPd56se8BYCIbW6AwgdPuyrHmD4PfUAoRyBOwAE6efNm6f2YWNCFSGhigvOcoSADK1gpeiXG/rx87ePHjhjUygzVsFXhHZAhNqp03H9xuPHsawVJYQDvH0UOWC7wNhuPgDrAcjQZ2Vlufbu3avH5djUxNXsVFRnc9JN8A0oKXlR0dLDDI0/lxPut1MComL4ZorFKI/jH/uiLsDzw1VHzmsfDJi4dOdgTMI%2b/bwukKsJuN2uOx6Pf1VhYcTBBx5w4Y5xS21tBBVMZaSbivqxVHvAREdJtUINbbAEkH5Kqg0iP8a7IpQCbS%2bYgLRPP/2015UrV0wAhKwYcghnp2JViDYgrAREsB1GD8yfGylp6k8FCV4GhtFOPiUoSKavLrQOATDkylyzb9K3V9rMzS1uM/mKwV99953u7M6d8cdyc4dc8nh04ATj4beD6T5Wko/3SaMqFL8rHEUAbRg5PSvDj/auCrMmEJmRkSG4L9DTMEglqjABvkaoUFLX2MLJGJb19hDHxBIu3zhZ0yjjw%2bAGr4KI0O4wVax7HAZ9%2bgBwgqbi4mJOiSNHjrC7Peh9tV47rZ3JENUBxEzSo2d3ZOimnckQ8SW0e8Shsr/klNvH5VUM5hzjyXoNnwx9OGqUak98vO23NkfZ3WHSRUTlcidTBOF3jPy8N0fFgYGB%2bGP/3NxcC6TEGh8VoS5IkG7iYMvNPOLjkSD/TQ7xQ/hKkRff3n7ton9HpaiciwaX2r4M6KwIJSUp37PZ2IqQVUBGJxJkeBLe2bElNyEkiDtDw6EdMHv27MHHjh3rc/nyZdwdxrfrZL606EtFCyezGzyK2dV1km1zu8PsDi71ETMM4vk0HuWNxKqQx/O9YX7J/odWbTk06tdb38Q0N7eMgGQoqnN3%2bOefo3B3GHd7vGXzu8O0W%2bQkZxtL%2btlpnO/dYaPRiEmF/9KlS80Ah7lcYMeOHezHBiZmBfAmIGY%2bQGA/bsAStJ5ZjmImRxD8QOJsXZOMagSau%2bdsvRt3phoam7kQVpmWptrtdFq9P5Dgl7WACfBv2o9JnFi%2bxNsEOo8VK1agD%2bAeFCCxmLExE1MQ4W1MQrPdRRmq7evZnWSGbxDgO1pbz8v6PrORO79n7tZhgAxdnjvXOBkfjhiu2hMXx38hIrg7TGU7DfuCaAKcjM6%2bd4f5Y9myZfonn3xSKAoIJkNCJaffmwyh8nwW2HE8Jv1bwY6HPD98o%2buMAv/HZEjoWwKhKIA%2bANNiG5hA74MHDyZCMmQAH2ChQgYKH0A4wEiYm4/9Q6kkHUVjDRTv%2bxE8tVBhxEAFC34XyEKE%2bCCdCipmSJCsHs%2bdUEiQHnml/PAT%2bEHFiW07Eo69mDOYcEAc4QADIwNDIBZhXYx%2bZvIvQ2nThdfZTD7B1SUZksvlCFFlYALRFRUVJvxWr7m5WU2JBqK4WBKkIB4uRTVtSSmZcwW/BU2okZehoOot/z0Qz0dom0QwmZMDDlHl8Xynmr3u/czZbx61ejY8r3r/4b8lQTIkAyQYSVmlgpHNl%2bf1hPrUhD6DaNIDGZ6S%2bLG%2bTMCYk5Oj7r6x2aIHaNwtF4BV0g1rw8RpYXyEAB/3GyMFZNuqq6slXXeSb8iOVp%2bNSc3aek/G4wXOr0UizqRqDn2sOFvX2M3s6hubTCfP1HVJ1h6atVbc0NRs/11AaN26dZGFhYXdsr6bN2/qfvrpp278q1evdlPm9u3bwe3t7d2yvh9//DFIiH/t2jULlsRYXvs/PQrPv25zk/Vo5oYHsh/OHi8qvBLo%2bfYmfkUa3n3r/Z8R%2bLVpN/5Pt0xCz9nW1tY1GYIjEQu106dPTwE4bCkoKFAvX75cCxEhZOrUqUpIkBIhLNpmzZqlBrSohZUSDOEy5MCBA/2XLFkSDKajhXMt7ins2rXLAePjp02bpsTf4/iZM2eq4PfId/F8HD9nzhz1/v37%2b23YsCFi0aJFQSgnLy9PU7Zli3Hfvsq%2bE/My5R88NS504cSs%2b8bll4/NKHh70gvF27MefPHNMRMXbBo5acGm9IfmlvQpLNk5Zk7x1mGP5pYmT1nwRr9J8/%2beMnXRpv5Fpbsezpj3qn396mVBy4qWa%2bHlBsPzhVVVVXXxAX70BXccKJqwefNmRIORaA4wCUiR69evj4XWUVRUpEMetPhBpREeIgnODXiOfPiNDnhOeOg47NPvOf7atWuj4cE7%2bfQbHfAS4Tdm4BuIr4fWCoq6QGldYdEKc%2bnq/LCKV%2bYG5xcWx7xUuDZ17pJ1jtwlaxx5S9dE5y192bKoaHVywfI1cXlLVlvnF75sQ3ppyaropSvXpqxY85qxaFmhkWQb4FmM8Hzm3/p42kVfcbNHNLuBwk8cUG%2bB36voS3HvA%2b3RIMDHz%2bADBGQPFRhr8sFPJvnexwCvZ0HAN5aq4UwYkHT4oDt37oggLwhWqVQcFhg7dixnmxglAgICOCA0YcIE/ApclJCQ4KdQKMLHjx8vLisrE02ePJkbq9FolBRVRI899pgYTIjjq%2bEIDg7uhjFgfDffYjabpSADv1USLVq4UPxMRgYnQ6sNCZQrFPrFq14Vr1pXKs6aM4/jg25hcrmCc7wTHn1CvGX7e6Kx4x6UBCqVIXBbDr%2bUlpaK0tLSsPxngGcM%2bK0/TvzZh5r%2bFzABv56jNzIeaDJQBuIR0f/Tg59dhNpjgDD1HURbcwPpfCR%2breY1/k85/gckKftakoh%2bIAAAAABJRU5ErkJggg==\' /%3e%3c/svg%3e\\" width=\\"447\\" alt=\\"png\\" data-srcset=\\"/assets/static/output_8_0.9e473a1.c8eecf9.png 447w\\" data-sizes=\\"(max-width: 447px) 100vw, 447px\\" data-src=\\"/assets/static/output_8_0.9e473a1.c8eecf9.png\\"><noscript><img class=\\"g-image g-image--lazy g-image--loaded\\" src=\\"/assets/static/output_8_0.9e473a1.c8eecf9.png\\" width=\\"447\\" alt=\\"png\\"></noscript></p>\\n<h1 id=\\"3-take-the-z-score-of-the-fitted-distribution\\"><a href=\\"#3-take-the-z-score-of-the-fitted-distribution\\" aria-hidden=\\"true\\"><span class=\\"icon icon-link\\"></span></a>3. take the z-score of the fitted distribution</h1>\\n<p>Since each distribution is centered around $mu$ we need to center our limit value against a normal distribution.\\nThis is where we calculate the z-score from the distribution.</p>\\n<p>$$\\nz = \\\\frac{(value - mu)}{std}\\n$$</p>\\n<p>which says how many standard deviations we are from its $mu$.</p>\\n<p>recall again that we want to see the probability of somethign accuring above the limit value.\\ni.e. what is the probability that we exceed this value</p>\\n<pre class=\\"language-python\\"><span class=\\"token comment\\"># set the limit of the measure</span>\\nlimit <span class=\\"token operator\\">=</span> <span class=\\"token number\\">9</span>\\nz <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>limit <span class=\\"token operator\\">-</span> mu<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> std\\nz</pre>\\n<pre class=\\"language-text\\">1.9135594519085861</pre>\\n<p>since we now have center our limit value around the $mu$ we need to apply the calculation for the probability given a distrubution that we assume with this calculation.</p>\\n<p>meaning a $\\\\mu=0$ and a $std=1$</p>\\n<pre class=\\"language-python\\"><span class=\\"token comment\\"># x between -3 and above with .001 steps.</span>\\nx_axis <span class=\\"token operator\\">=</span> np<span class=\\"token punctuation\\">.</span>arange<span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token operator\\">-</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> \\n    mu <span class=\\"token operator\\">+</span> <span class=\\"token number\\">5</span> <span class=\\"token operator\\">*</span> std<span class=\\"token punctuation\\">,</span> \\n    <span class=\\"token number\\">0.001</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\"># Mean = mu, SD = std.</span>\\ny_axis <span class=\\"token operator\\">=</span> stats<span class=\\"token punctuation\\">.</span>norm<span class=\\"token punctuation\\">.</span>pdf<span class=\\"token punctuation\\">(</span>\\n    x_axis<span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token number\\">1</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\"># plot</span>\\ndf <span class=\\"token operator\\">=</span> pd<span class=\\"token punctuation\\">.</span>DataFrame<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\ndf<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\'x\'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> x_axis\\ndf<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\'y\'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> y_axis\\nalt<span class=\\"token punctuation\\">.</span>Chart<span class=\\"token punctuation\\">(</span>data<span class=\\"token operator\\">=</span>df<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>mark_line<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>encode<span class=\\"token punctuation\\">(</span>\\n    x<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'x:Q\'</span><span class=\\"token punctuation\\">,</span>\\n    y<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'y:Q\'</span>\\n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>properties<span class=\\"token punctuation\\">(</span>\\n    title<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'Probability\'</span>\\n<span class=\\"token punctuation\\">)</span></pre>\\n<p><img class=\\"g-image g-image--lazy g-image--loading\\" src=\\"data:image/svg+xml,%3csvg fill=\'none\' viewBox=\'0 0 453 364\' xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\'%3e%3cdefs%3e%3cfilter id=\'__svg-blur-8\'%3e%3cfeGaussianBlur in=\'SourceGraphic\' stdDeviation=\'40\'/%3e%3c/filter%3e%3c/defs%3e%3cimage x=\'0\' y=\'0\' filter=\'url(%23__svg-blur-8)\' width=\'453\' height=\'364\' xlink:href=\'data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAzCAYAAAAn3w6xAAAACXBIWXMAAAsSAAALEgHS3X78AAASTElEQVRo3s1aCVhUV5auV8VSyiJQ7BRQVBWyiBg3VBYX3CISbSeJOslMOl9/M2YzqETRJG444q4wLBo0CWrYRI2JoqLGNdFEWnFhKaCMigQXTBu1O9N2Mt015zzOrbk8XmExnS899X3nu7fOO/e89%2b6797//OfcqFP%2b4nweIC9UdqBSo7grixOl%2btZ/AZOPGjYobN24orl271kW%2b/fZbsWxsMiv%2b%2bse7ilXbjwsoPz26I%2brk2qCcOnVKMW/ePPGFBEFIA0kHmQt/V0O5FGQN1DehHspcpVI5Fm2Tk5OV58%2bft%2bnXlrDn7E7%2bkT/8ws4gYSB6kAgQA0kfkFjS/Wo/HHqRIDEggzZt2uR169YtT7PZ7AE9JQr0KIoGxBPrpsZmT8uf2903FJ8MXA/y8%2bO77jACxGtkb7Vl7bFsaWnxslgs7iBuIGoQZyp7Ud2Fyt5Xr171hpFofQZONLxfEi/478X9t9ry70B1TxA13wEq7AAYftgB/XNycuKuXLkSCjcPAMNAaBgEpT%2bU8SDBqGtqNgf9/PiOd0bB4bmLtlQtsTy5r2lsNmvhWhDYiLZQD4YyACSQ/KC/BJPJpG1sbAyCe2hramr86%2brqYuvr6wdevHjRD%2braS5cuaWtrawPJh5baMkH/CUxH9/MFiSXxJRt2zwRJe3wGfIcom8Nh1apVIXJ6aBzaSRG8yOX1DfuffXdLVYpiyEoPia19PuAHD9MHR4w9trb0bLTJ%2bJb1AXp9FxA0Go04EhRr1qwxbNu2zQmGoQK%2blACOBWpkBHHI/PCYEv%2bPmVscsWTrkbjVO46PSUrbKc7Zov3nVLwtghG2J0F9OJRK%2bq8kWx%2bQAHoRdg3r4aBXce0F%2bI%2bCekHiww/qfswHuy6xZX7Rp9HmCMjKytKpVCqlTK%2bF8f/j39oRByuAsejzc5Fxb2wfIrHVySGt1AfpcF762GNLLyjnA%2be6l70%2bQG/g/%2bPLBsBLB0GpBQyIPnPmjFdbW5sLGLqCuIH0xjmGw7Wm1oQA5jRj2e5x5VXn%2b//%2bckP080sqUlF34UqDO9hZbaF0AUEfrlTHeeqGOiwRjHBIgxig7kz3QnEhH%2b70DEyw7QDmk2zRRxgK1d3ofigDWFuuDT5XX74DHEEGAwgmQDkqLy9v2OXLlw0AgghAISjQQAuShF/21s3r2otXTfo3N%2b6fAf/7X6lvHP7Ghv0vwiqgu379W7QXbemhEAiZj2DSh3L6QHqhwTgNOFutjC27lsR0JNhuIArzQRJMz8zahRAAYkdFdzcFQmwMGw5QnlOOeGvHKIvlZzWsAB6DZ30cFzxjs6sd4CMLgjiEewBgcj4QBD3t9QG2nUEQvr5i1qxZAgPBLVu2iHS0oaHBCoIIHDDcRer6UuYer3HpxUnIBSyWJ56j534SP3P5ngDuBkYQB2JdDJBEYCOQUnB%2bvfEr8iDIfICd1ZaTcM6vFQRBfKmdQNcY6DLwtA8EsQMKCgrEDoD1udMqUHmqRuyAae9XhMMqEAsv72qxPNaMSvtk0AtLKkL5DmCrAIfCbHVQshcgv97IM6gucPpOtpwvI9Nxtl06gGyMXJ2V6LNLBygNBoOKpoCtYaNj9bHzimOiX92mB%2bBztFh%2b8NBO36wd/05JrB3DV2eDB3jbYyt9Ds4WmaCnPbZyUwC/9giYBslQTgQqnAhfvu/169d1BBh6fCGQ0Q2NzeEWyyP/5R8eTc0q%2bmLUk4d3ou61tQzZvPvLQQs3H54BoyGgtqEJwW80fSnmA0WHevRHiK0ntjgIJI7qemaL98PlimytQr7DJD6GoDAf7LrElvnFadFPGgm6OTo64jrqAtFgRFVVleuDBw%2bcIB5wBmMUR0ROWOaQqyteWrF3DM75v/3pnvePD25rX1y62/%2bfM/eMR2efnbiAy1kULZ1O1N6Z6tEgalry1ER0Agmhcf6reVvQ9cL/aM%2bV0ZxPNbXTkvA%2bpLbML/oM744Kh82YMUMlRx/zK86Icy4lo2wc9JXQfvuW%2b6P73wGJec1x8sKy0TwBYdjRLfp26LzY/H2arS094Yh3D3wYuiiTkpKsq0BhYaEIghC4WIEGh/S5i3UiCE59rzwFy5Yb1zECQwKl%2bM17uybOyz3ozAAMVwEpCBKCKwmobFJh0jPabAU8RoU5nZLaWUGQQM5KhSVUGq%2br5EDwqcEQD2zj0kvGYHnzxnXXq/VNIgef8E7JOEXEEsenrL9/dzAk5xs5gBwI2ssD8KEHAQgOR4qfm5s7HEJVIzBBZE2hjI2ZzddGPmz/Lrjk0Dcx8/MPzfjp0R2/ZrN5AITBwyx/feANX/9fPz9xIeoPd1sxFB1J0yCEADSU2NlI8od11GOo/QwBWCC7H4EZ2uo4HyHUdiRrTxJIQDqImGWn%2b0nahhAI95PGAkFKpRKHRfCGDRuiv/zyS4/bt2/3Rk5O0qup2RyLfH9OTmXEq6v24YqhAMQPMcHKgHXULSg43BdsVGiLPB7jAuL16APr/VlcQLzcmagqorkT8XUXiif6sziEew4X8sHqaO9EK4yO6q42bJlf9Nm3uymgCwkJ6RINAtcXh03C7B3aiQtK47BefanBs66hSZy/zy4ojYapISYa6hub9XLRoI1IzlMuGpSztaWnDJSmBxGlQSHJvAp6vd6aD4CIUJzLEBRZGZupySx%2baUD7iKnv7RqA9Uu1jZp6U7O2gx3uipzybvkgsQNMzQg%2bKrqZKBw4CjJU2J%2bxOGZLdFopTXSSnv1nPjAT5Mv74Jgn35YBbbdUOGzatGldlkEgQQYCuyEg4kvD1/eAl2UjIGxSRulg6gADe7inZWKIxdm9DNrwIbsMytlK8wFYwYZ%2bKpUKXypk9erVUadPn3a9d%2b%2beSIQoxnaEDoiB%2bS1MX7r72fc%2bqBK/WLP5WgDMd3GYARMMAjI0Duug60dz14nmuUhCkEyRP2ciLCoCwlD62mq6LtoiaZGQIDXprf%2bpXTCF4Sry4UwiJULOhEtWIhRHaej%2bsArg0jYcmGBiXV1dX1gFeBobCmifbPnL91pA%2b5f3Hb8QCysCovYzIMNvtdzQVl9uCE/PPfjb2603g4nGGgmcGC0V6S1HVfWUZEX0jkMmx2iy1JajwZ3oLecDV5EhlAPQy9Fmzi8%2bV78uwwIpLv7Wrl0bIrcrwwKL5HnFoxTGxQ40AtzY3BOnx/ySCVjCkqnrSTBkY/j2xIeXDR6ge9o0YjtCitdee00sYQrI5gMg6Ambk3PQPXVhWbLkxkGsAwEEx%2btf/sCxteWGHvDBgWdxfDjMAxgfDkuYYCdbzhfPBLuEw3z%2bgU%2bKsnCYpoltEIQO0KenpztI9cD5Q2COewHYjeFGhQejsbRCJAya9bEGosTgg6drVPZwcIwFWEZXastWBDt8%2bMiF1DZsu%2bixF93VarUblOp169aF7927F3dqlACCmNVxOHb2svLx/e/0b208EDTt/QqxA1IXlQvE44MVvdPELwFR4QiICfSWP7eHfl1Tz6I90QfVI6B0pK/gwKW0g%2bjhHMkegU205X1QGUF83oHzEcBllRxIVGTrwLVXEeEySqlwIoAgguFwYIIj6%2bvrIwEEEUxwOTMA29M/bG9N2FBycuKKj4%2blWP5yXwurgo4AbAQMd53F8jBo%2bYfHpqz75MQYGC3xQJwiCKQMlPVFf8k0tJk%2blGL5YURTjXTPMKkt5QawTGZ%2bSYftMJ8wlMsws2vJ7P4k2K4vSIx0ZKgYEUIm6O3trewKkj/6pi4qG4ZMkMMATFtbh%2b/Y9OJQuB4LsYH/29kHlPYwM1tMsCf7AsgCbSRW7doX6LQKIBOEgEhkgrW1tQRW4%2bD6o8DnF1eMhHkexIMgBiPsP3AEj4nzS0fjcglLJYsMOzFBDoysIMgzQT4nyCVQFTI5Qd5HJybIsT%2bjzFa5PBNMSUmRzQrDUifq79%2b5FQYdMA7muLukA6wd8krWp24AkuP%2b9qd7wYfO1DhdrmvslKVl9FZCY/kOkF0FuKQq2%2b6yor00HyDdipNujRGmdLsKyOYDampNeqC6EyRDCSO7TsM3cfaOxLMX6sJ7EMu7yw3fnuQDaBr9nzdHcagOIxAcnJWVFW8ymdj2ONLUIOAAfsD0xqRlV/7Lfz%2b%2b62tqatZSr0dTHO4LoXEw4ITmzY0Hnj/y1eWU//rhdgCMnkCK84OoTKAtbabzBYkhRunL7keonkD0lvlgbRJYnbbusV0siS93L7Y9HsS1D6TwO1qaDwh0cHDAddRn/fr1A6qrq31aW1uRoXnAi%2bGhBnXpoW%2bmvrlh/3isX6lv9KK4G%2bllJMb3F6%2baNHjt1VX7xlccrZ5ksTx2h5WCP5zQh1YNTzrE4Ek%2bDLQ8urBrnK2XzAGJQdyhB08aheE0ZVzZaGC2kkMTfeiARUR3UyBUjgqv2XkiNWVhWX/JUHKTRnJAhEKzir6Y1gMa6/ELUWGvHuwtdD0fEBMTo5SeDzCZGoUdB74Wl8fVO46/8srKT8VlZc%2bx36u4RIQIgke%2buiTqxqeX%2bGd%2bdOx3WJ%2bTU6k0/28y07o1xidFicV1SopytipJQlQgfafzATgd%2bfMB/DYaB8KMEndPhW3tDL2%2bfv9LCuENlRQE5dZwCJf/vSebo7/ECREbO0N2gSDSyQgCwdi8vLyBFy5c0N68edMH4nq/H9pbfSqOVIe%2bnV054w93W30A2Pwo%2bEDyEUH7%2bLgc%2bgMj9Ae%2b4JGee%2bi3u49W6x7ca/U2d9jiF0KAQsbnT2DlR3FAFDIzGsbMtw%2bxQ39a41l7LIcxHdmij360kcL78CVbPzZC6L4IjlFyh6QGYgfk5ORgBwS2tLRo6k1NPhbLE/f3C48MzC499Tqe7qq5avKlGMCTgCeGwMXnan2TL57wWrPjxPSlW48mQN0VQJTZ43QZSnVvKj2Ir0ezkyL08hqitr4s28O1iSPyxPvATozkfLDrmGfwkfjAjojs0RRImL1z%2bLZ9ZxNkhpiblAfgb/v%2bc/EpGWWj7NmsBF2fHvIAnb3nA2xtjsoekoqMjLSCYH5%2bPjuuqpi17nNnYHcpd767GQbMTrWrqpqP5XHIBbI4vLXlhqj/4/dtIcAap05eVCaex4MRpBr%2b5nZFc7M5vPJUjXJ98UkBqLKSss0%2bjc1mEQQPnLyoLDn0jdCRbDGHf3HuimrZtqNC4adfCbgtV3b4vIB6CMiEjz47K3x%2b4iLz4YeCddRt2/eVkF12SsD7fXb8gtB26wYmaRTdbY/zSVE9BESO7D%2bEvclj5xUbLD99H1R2uFoMP9vb23kGJj58W1ub4u69Dj2Ew0Ezl%2b8Jn5RRNr5TTqG9tctXtTy53wfIVZcR8FDGlvRdvqrlx3ueKDI5jA4fg/dZdYBtgjQYEneHnZyckEq6w8sb0hYsFvf4UheW93tuUXliRwbY1PfM6VPiKnD06FGB9g698NAj1s%2bdOyccOXJE6LBtFDceJi0oG5q6sGwi%2bNBPnF8cUHro67gXllR4T84o1fzT%2b7u8DS9/4J5bfrJv4d4z0drpBe7PL97lPfXdck3yvGLPMrCdvqTcJyWj1Ou5RWUaiEQ1UxaWeJcePBs3aX6xZgrYoX3ozM3umytORRXsOhkZOrPDB9pPzijxKjl4btjk9I8wz6F4d92H4stmZGQ4yOUD4vFsAC7jQIQSi4uL9Zs2bdQtW7kuKmfdSh1miXbu3JmQnZ1txA5au3atccWKFWFbt26NLSoqGgJ1HYwcI8rKlSv124uKErNz/jN889rFQWmZBaP%2bbenW6bMzC8euyv9k2pzM/KQ5mQWJc1cUJL21NDd%2bWfb2CZnZ2ydhHXVwLentZXmJqwuKp85fvTUhbXmeaJ%2b2PD/pnazChPWF5VPm/ccHCXPgf4ePvBGZOTsmosxelj9ibib6wGubE1flF09bnl00YM2qlQZ4ByOwXH1lZWVIWVlZFxBUwg%2bHt1BVVaWkQ8y98ILrMzNFA7VabWA6a885Ovo4Oztrpc569eoVwh2J54eaXHyOc9dfxrYvHarudEvQD5RhquIRPxkfRkr78x97qEaj8Xza0XlMk4svMDrlBYXa2Rk7BTc9elNnsAfABxfnpKurq6J3795Mj%2busGDY/M/F3QjOwSg//MHgZQQxCxr%2b%2bUYid8GqHrdIhUCGIexIK1EWPnkmJFGGgo3NvMcKLGvmiqFO7euL949VuYqmISJjWYSuowhSCUjyiM/Q3aUKu2aIIH54K14QoQamyRrcqlQo/chJI1w6AESDbG/CVf9Gj6fAQ1pNpVLqDePK6/w8/4Vfwy4%2bWgT24r/B3voeo%2bx%2bVVSGibeLdSwAAAABJRU5ErkJggg==\' /%3e%3c/svg%3e\\" width=\\"453\\" alt=\\"png\\" data-srcset=\\"/assets/static/output_12_0.e18b67c.39bd037.png 453w\\" data-sizes=\\"(max-width: 453px) 100vw, 453px\\" data-src=\\"/assets/static/output_12_0.e18b67c.39bd037.png\\"><noscript><img class=\\"g-image g-image--lazy g-image--loaded\\" src=\\"/assets/static/output_12_0.e18b67c.39bd037.png\\" width=\\"453\\" alt=\\"png\\"></noscript></p>\\n<pre class=\\"language-python\\"><span class=\\"token comment\\"># With z score we can now use a normal distribution for our calculations</span>\\n\\n<span class=\\"token comment\\"># plot</span>\\nx_axis <span class=\\"token operator\\">=</span> x_axis\\n\\ny_axis <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span> <span class=\\"token operator\\">-</span> stats<span class=\\"token punctuation\\">.</span>norm<span class=\\"token punctuation\\">.</span>cdf<span class=\\"token punctuation\\">(</span>x_axis<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n\\ndf <span class=\\"token operator\\">=</span> pd<span class=\\"token punctuation\\">.</span>DataFrame<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\ndf<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\'parameter\'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> x_axis\\ndf<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\'1 - cdf\'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> y_axis\\nline <span class=\\"token operator\\">=</span> alt<span class=\\"token punctuation\\">.</span>Chart<span class=\\"token punctuation\\">(</span>df<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>mark_line<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>encode<span class=\\"token punctuation\\">(</span>\\n    x<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'parameter:Q\'</span><span class=\\"token punctuation\\">,</span>\\n    y<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'1 - cdf:Q\'</span>\\n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>properties<span class=\\"token punctuation\\">(</span>\\n    title<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'Probability of being above limit\'</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\nvertical_y <span class=\\"token operator\\">=</span> np<span class=\\"token punctuation\\">.</span>arange<span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> \\n    <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> \\n    <span class=\\"token number\\">0.001</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n\\nthreshold <span class=\\"token operator\\">=</span> pd<span class=\\"token punctuation\\">.</span>DataFrame<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"prev_threshold\\"</span><span class=\\"token punctuation\\">:</span> limit<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"z_threshold\\"</span><span class=\\"token punctuation\\">:</span> z<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n\\nrule <span class=\\"token operator\\">=</span> alt<span class=\\"token punctuation\\">.</span>Chart<span class=\\"token punctuation\\">(</span>threshold<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>mark_rule<span class=\\"token punctuation\\">(</span>color<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'firebrick\'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>encode<span class=\\"token punctuation\\">(</span>\\n    x<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'prev_threshold:Q\'</span><span class=\\"token punctuation\\">,</span>\\n    opacity<span class=\\"token operator\\">=</span>alt<span class=\\"token punctuation\\">.</span>OpacityValue<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0.6</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\nrule2 <span class=\\"token operator\\">=</span> alt<span class=\\"token punctuation\\">.</span>Chart<span class=\\"token punctuation\\">(</span>threshold<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>mark_rule<span class=\\"token punctuation\\">(</span>color<span class=\\"token operator\\">=</span><span class=\\"token string\\">\'firebrick\'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>encode<span class=\\"token punctuation\\">(</span>\\n    alt<span class=\\"token punctuation\\">.</span>X<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\'z_threshold:Q\'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    size<span class=\\"token operator\\">=</span>alt<span class=\\"token punctuation\\">.</span>SizeValue<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\nline <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span>rule <span class=\\"token operator\\">+</span> rule2<span class=\\"token punctuation\\">)</span></pre>\\n<p><img class=\\"g-image g-image--lazy g-image--loading\\" src=\\"data:image/svg+xml,%3csvg fill=\'none\' viewBox=\'0 0 447 364\' xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\'%3e%3cdefs%3e%3cfilter id=\'__svg-blur-9\'%3e%3cfeGaussianBlur in=\'SourceGraphic\' stdDeviation=\'40\'/%3e%3c/filter%3e%3c/defs%3e%3cimage x=\'0\' y=\'0\' filter=\'url(%23__svg-blur-9)\' width=\'447\' height=\'364\' xlink:href=\'data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA0CAYAAAA62j4JAAAACXBIWXMAAAsSAAALEgHS3X78AAAWGUlEQVRo3sVbCVgU17KehWGGfV9mBhiGVUAWFxQURQW9GsUl4haX55armLgggYgKUfZFxCUaxSXRSKI%2b4zVqfO4oAqKIorLOoEaNGGPUuOQlMc87r6qtnjQzjTH3eb8331ffOV1zprr6nFNVf9XpEQje/McEyJGHLwIyBbI04OO1hDPmzz4SkiOg1uSNaS4UCplm2LBhgjttdwWP7t0WbNlXKRi1ZLcwY8sx4fVr1wStra0MXYM%2bl0JCQhjlRSJRADQFIGs6SFsueEnpQKuBsoC/FGgZjOsM14uhPwloDlAOXGdAOxvaZGj7QrsO2kXQzod2LshLhTYCrj%2bBdia2ICcM7xscHCzi0%2btVhOP/HR9cISmQE5A/kB9QIBBOjCftjj5AzkC%2bQBZAShqjAnIHGgfkARQE5EPj8DsvIBldu1Ire2OKw6wqUMnY2FiXRz89tnpw96bV5n9UOsAO8Mn69LhKp9OZtd3%2b1qaxWWMDu8EaZtAaZhLJ9vr169aNjY02uhcvLGGche733y2glQKZcMgUZQBJgMypZcdJ6Hvsi4Bk9Bv2OymRBV2zcizxvnh/0MOGyNqAbHl4OM60ne2ampriBPgtWLCgR3n5mcBnP/0o33P0vDo%2bbXfE/FUHJ%2bVuO7EQHtr/u1s35BptqzsIcINrbKOgdYPWvfnyZVWbTmdfnpQ0saqwcFSLTudw6dw5z0uXLqnq6uoUTU1NIQ0NDd1BafllGAvXHtAq4brP1atXvYHca2trVfX19corV650An6vyxqNa%2b033/hUFBaGXnv40PVKXV2n5ubmXhcvXlS0tLR44H3h/q7Q9gDqBH0F8lA/IBXqB6QkHqu3J1AA71ZYtWqVy5QpU8wN%2bUlrD/WesPyrkYZ8FGbIOx4XF3N61qyePGNx5zjy8D0MbRKuJa1aLZqHYCq4l88FAmvsN509K8EH4pEhB5Lx8FV8zwkyvHknYMWKFcr8/Hxb7K/Zulu4cM0hMfZhu1nPLT4YFz3/c7RrQcKK/SJta6sQBPmSQMHZtDTGGZ4cO/ZvFQsW9Mb%2b%2bYICEXwnpDEOQHLqC0E5ISnpDdcS6rNjLWACmMk9OnSobH9gIDNxmitXLOA7T0MZ0MfdYM3yqRUD%2bbA8jhPU8/VBQCqVOmBYSkpK8tq4cSMzAdXV1ehdmYeCra/85vRF10EffDEErw%2bfuSS6cf0aPpwfeVXhhfXrmbB0cvz4wRULF0Zh/%2bJnn5mwMnD1cYuSQiIO3wdISsqxPEsgNSNv4kSzg127OtEE6Pn4e854FZANK5smx4RdIByLOhKZGE6ARCwWo3fuM2fOnH7nzp0Lu3Pnjlqr1aJivmhLzS3avv98di8ATCF%2b41cV0bpn99yB5wffx%2bAK4kNoGxr8ftDp5FWLF0%2brWbNm3D3oaxsbcYwv2V13oF6oLCpGfDXQAKBOuC1RMSAvuA4G6nejrc2j8fTpwAsbNoTffPhQ1arRBMP3/XAX0O99SV5faMNQHsognVj9vGiSWT76is7ttn7Pnj2ZmVy5cqUiLS3N2tA0wPsr0ROHzNgiH5LyZS/kKceuF3JtqYDaE6NHDzwzd24k9je0tzs7IBcee0SlxQY8MzABDIeCvc7OEiB77LdcumSGC8IjA52epQEP9fPiGcuYXTsmPBzT5ubmusMk2GG/srKSu03db9%2b8AaYRIRyxeNcw5FXV1otpBRgTqFm9mnmIk%2bPG/a0iMZExgdpNm8SsDLixI5CCsyVZPq66KSvH0AROjBsnOxgWxvoAS5wwQxMgj2/D%2bhGSZcLxUawJMD4Ad0O7Cejfv7%2bIJkA%2ba9Ysc55Zc6m90mSF/ZiFpVH%2bU0qYSWrRaNVGUWD48Jjy2bN78sjAGOzIw0flDXmmbBQAOCgqFQiYh2uurjbF1eaRIcddw8P3fJ0oIAFYifBzwOzZs/uCDwgGH%2bAOPkBNNoqxMwLMIEyn%2b9UxfdPRYTmfnYjRvXig0Gi0/cm%2b1dr6eq8fdTqnyg8/nFKzalX8feiDX/DiyOgC1IO2Kysb43g0a8vEw7AYCBR14%2b5dZUNZmX/Nxx93ufnTT27gA5Dfh7AHVz/0LZ0JF6hJJ7T3fiRPTX4D74E7LqhdFJDJZGhjNunp6T47d%2b50RaQFQMUcBiKhJ/eB1ZYDXwiO0GNixleDsQ%2bTEgLfy%2bB7s6aKCoS2glPTpsVVLVkygFbMAr5DGRJolaSICfGQcEWDCFkycoCQ54DO6olOJ4boYnty8mS3/wF0CE7VgRwmVwZudXR4ziQPZcjIjHBSpDQW/YcMfQWO58UBBQUFCpgEax5AodBqX4aZmIU7ZIOTvxhIJqC3pWU8TnBVexn/khP8ytFRstfJSe8E%2bcANIbzXdoIdAiGYAHlCQoIFzwS4cG8Qk7ijX%2bDUTRaPfrhtZI/HR4yIKU9I4EOCNkBOfGiNdX4cHvoARnamQCD%2bgvUB586hs3TrAAmavQ5S5fMBJoADMLVUJScnhxw9etTr0aNHthqNBoGLEyUPGH%2b9a%2boa7TEpmb1i//CCz08GPfj%2bdlhTixbHOWrq6pwxkYHVH3MuJ%2bct7IPXxm2JMmwpLgeRPCciO8QH6MSgxe3tSDy02643Hz%2b2vvL118qq9HS/OzqdTWtzM8M3kIETG0rmZUfRBlEnLlo4kD3xUE%2bGj3kDdwLEJiYmmL7a5%2bTkBB06dMgfJsARJsAVZ5bsER2YX31Ti5NO99Ru8YYjkYvWHx7066O2sCsNLZiMuMLDKn6FDA1g8Phz%2bflx/w19zdWrmJy40sMFAIWQEq5EqFhPcmTOxHMiRxb%2b7YMH9vWHDnlU5%2bQE3H7%2b3KG1pYXhk05yIpTXjcIpPiTeDx9Sgc4bF5F4rrSTlR0mQ3l5efKZM2ead2ACetMIm7nFCXxBb53uF6fXDYOvSoYMwyA3GZoHYXAHJUPgVCWvMIE3kgwpMjMzbTgC2FbJYm38RM3dbh63aGcM5Ah6J3MoPJyx4xPx8YPOzJ/fiyZDyJFhj6vAyuXwMVSaGChuDhPAKA8gyHSfh4cDA4Tq6szZhzKQgeHPykCGyAjx/QGU2gEhkUQiwdl2SUlJ8SktLXXEwgTk7uhwpISe0L6cIQMUna1twOKEcEz6fw4/d6kBsMHPYuCbNhw7xqxA2eTJQwELRDMQuqxMxji0lzd1JdsWUmiSEprrxGR/MAk0Vkw%2bg0Fx1dnZVsfi4jAECwBX2BJmEFICxernTWYhIhkSCqkBJM%2bUwivyZSxC5CZDuGIR8%2bbNi6qqqgpta2tTARBCod60RRFohCFqa2rR%2bLx4%2br3bBx8fmnTq3JWR4Ag9IER6g3I%2bAH5cqlJTpwIsHgOJkQvEbR9SDmV0Q5vEPqXA3pTIIJjyJyfmTSCmM1BfAELujadOBQAW6Hbz0SMPAEIMn5VBcrAfRf5FRTK8KOHqTwAIx3nRQjLOmNcEioqKXOfOnWvJYzOuhnF20AelIUWlZUOMfMDIkbHlc%2bZE8MhgPHcHUFhowJOyYXA1OOmdAgGTojfX1OCqu/PIQGdr/rpQmDUNBB%2bJVIzUJ0PFxcUMzj979iw338ZyEsP/bH8VA1ri03YHQSicwBRPdp0WX1i3jk2G/qgHbN0q5iQs7eoBHNk%2bhOD46wHvvGN2sEsXo3qAgQx9PYDMSkAm5cvhCTl1Ar0PSAHqyuKB7OxsBfiBjnZAOycT9f52x6Ubj0ww2gGjRsWWv/ce3w7AAqUzH1hhM0ODHcAszBbQa7dYzOyAlgsX0ObdeWQoO9gB6j%2bLAmgLSvABWMKKgO3fB1YeCyKeWBCh4gLaWG/odyFlfb69cd3r0tUmf8gLZt67c9NTA2PBB/iC3bsyPmDNmrHYBx/gSyuMK4Q%2bIJLs1IcI5fUnfO9F9qsmHxB9o63tpQ/45JPuHB8QTWbD1a8P9EM5SZAXAa8BJM%2bHw/fnJkOIsU1tbGwQRkoyMjI8S0pKHNDjXr16VcKp1amopIWzJ4EJMNFoW01m5u2L37qvUvrbT3fFl77ez5SayyZOfKsyORmzS0H94cOsR2axhLs%2bzr8kITlA9Nhi2rZCgs3MNq1MTbU4EhvL5BCQcdqw2xd/z%2bpHzs2OLXmR55eSbBHdy4TuIWVNA20WbdWaA4TcwA8wtgSwWF9gpC3GbEN4cIFr/DqGn7n1%2bDQARIxym2ckMj7gxJgxiAOYoijAYhEnVjPojZOQ6B0SKsjyOTiAcWD/1bu39Gtv75c44PJlc76iKPkoKy52oSKID5fHwQc%2bvFGgsLDQderUqXxI0JmLBNnP8i3HxnX7%2b1YPQyT4JsviMw3K4rgYbxoJIg5AhcOSkpK6lZWV%2bd%2b/f98ZcgEFHTRgwtGVAAtOhKKhSaPQ6Z44bDtwdjLggVjID%2byvXqxzf6bTWVckJk44X1g4/Cn0NfX1iCAVlFQFUeHSiXgKwv%2bRFMtdiedCu6LHt/fvO4AZeUJuEXT7l18cIRdAfk8DGU5UcPWjhVLQhLgRfnHh8OS0WwIMkSDOlFN6enrgwYMH1U%2bfPrWGCbCnbWtFTklNq2jfotHa636%2bZ3ukom7AjLx9o/C4q/ZsDWaDphAB4quzsoZgH7asI8mwJkcUQPIciGzIOaKSdgSXbSi/D7v17Jnllb175eAHfNp0Oittc7MbTaIVJUGsfiFsKASePfkDJ5JtS3Lt6R7I79RhPQAiAV89wAgIMfZedTloQOKOAQb1gNjyhISIN1UPWAm%2b6ku2HlBT01E9QPFX6gF8OQLzARAkT01NterAxowqRU/uf%2bcxMKm0X%2bR72/STc%2bLttweeef/9SB4ZOPu8FSH0zgY8GVsR2gUmusfG5mUR9uJFxPEefDjA0EdR5PHiGWvkA7AegAz5/PnzAw8cOICJh7S5uRkTFEtCab50EwwheDxlUXmh3lr3/EcfrA8uWn/YU/fiOuOETs%2bYMeJsWloMs2Lnz1sRqpNSwdKbkhJL4svoEMSW6nsWxMNtGghYQnJxyxb7UzNnejwBk9I2NTlRwdSUdLOkvj8dkuIEWZAsa5KNIdaCiOX7GVaEukHbGSYgsqKiovPdu3fdAAh5YsghnN2TqkJubHW1sVmjfnz/u4iPNh2NgXA4WPfktuIWVoVTUibXFBeP/lGncwRwpCYZGEYxmQoneZ4EWtwoufGhhElFp7h4etP7xvffyxtOnvQDYBV28/FjBTjBAPgOQZmSfu9JhQ90pEGcU2EPOmGKJqfnyeF7G1aFuSbgMm3aNN5zAb4wqPvlB3nA1E1O/Rfs6PV/OBfw4DkX0IfB9zhhsLmD02E6F3jtMNihDwAn6LZixQrG3srLy4Wc0xtcKTsOABGACYjufvet97BFX5oPT90Zq/uEToc5J0MAYcUcsMJ7OMqeDBmc7FqwSc/x%2bHjZgZAQ/ekw3%2bEo93SY6g0CKpf7coog7ImR8emwubk5/thk0aJFKkiJrTuoCNly0dr169cETc0a5gZDP/xyyNT56805SJDZEWWTJgk56E5fETJAgpgDmPAgQWb1vgkPl%2b7z9ORWhDx5ZOiRIIcnYp0dd4fxIUE8GeoHbY%2bFCxf2rqys7NLW1oanw3gy7Mt506IrFS18Kab7Ah4YqPvtvltayZHR678sGwDO06Fi8eLpNWvXtjsdJptnTofZk12SjfIGIDB51elw7caN%2btNh5HNPh8m%2b%2b1LBRk18b3KMMSTPl3NqbHw6rFQqEYubZGVluQMcZmLunj17uFvSjbMD2K0kbGrRMN40LnWn76gPS5nYf2zc%2bCFn6AWJ6oyMP31BgjJAiQGO178gcWTQIOl%2bf382F9C/IMFuax4TYFdazEmcuHyRoQnoP/n5%2begDmAcFSCzk2JgbWxDhvG2Bb4kwJjA5c6/5qEVfvMXY7Ljxg8EHMBNwYe3adj7A4HRYyC2IcN8QYUKW9uXB6/GRI2UHOnfmviHC94JEuzdEOLbuy9G549Nh9pOTkyOfPn06XxTgTYa4Z/UDF2xnEGH50MHRp/5iWfzflQzxvUvAFwXQB6DXVoMJhB47diwYkiEF%2bAAVFTLkdKobTPFXRTOObd/6Jo0KkiHnjJLDgxeU1vS9mpIYX72yOP4B%2bAPAAZ5UAFFQwYI9BVIRIT7oQ2bgTpPhRnbaC3CAa8OJE741q1eH3nryRA44oBPhAAVHBoZALLYGcvRzJ//Sl%2bSxOruTTwhslwxJpVKEqKZgAt67du1yw2OtlpYWK0o0EMX5kyAZ8RCFYRuq1bZaPPz%2btsWevSfsh%2bUfHVo5c0ZcZfpHA7Go0nLhgjWNl1HGx74PxMrGE9sQgskWxDenHRd0F9DfpW3bHE4nJKgeAjoFJOhMWSWrB6tfAHs%2byOpHiVEoE1H%2b4FkQ378jE1CmpKQY5QKQGcoBGhvlArBL2mFtZcphvxXTP0z9Yc47LNLSJzmX6xvt6hubXYxfv2lR7/7mdLtcoPrCZbPGxmaPl8mQSLLDypY5Ha4sqzBrbGox2tYNTc1utXX17ZK1%2bMTVQpDt9ZeA0Jo1a1yys7ONsr6HDx%2b6Pn/%2b3Ih/7949o2wr9z9SlmxIWDrKCDUyb3r%2b096I//ypG89Yse73Z0zEwJd3WulFa4b/4me58fhfmVT8dWTj59atW%2b2TIfgEQ%2budkJDQDeCwatmyZVZ5eXl2EBHs3333XQtIkIIhLKoTExOtAC3awU6xhXBpf/To0fDMzExbMB27wowsh5AbDZL974wfsiypIH1I2q5RE5d8Gjcl7dOosSkbwxav2hm7bN2eIWOSN4ROS9/aHWn8opKw/E37Rs3O3BYxecnmrlPTtnR/J3VTlwX5pVE5G/eOeHvR5pCElDWRyX9PGzA2fVvogrzPo3JK9o7gyoiHfvaGvXEfrPgiegLIQxlTlm7u9u7yz8JzS/4xZlrqx15ri3JscnLz7GBxbeH5HKurq9v5ADG9wd1p3rx5Qdu3b0c06ILmAJOA5LJ27Vp/aH1yc3NdkQctvlCphEkIgWsFXiM/KztHDr/13bwmR528vFidnLnaf3FWsffizCJVTtHHARl5xcHQ91iavdJraVaRF7SqjLyV3T7KXeW9JLNIDdfqJVlFnmnZK/yzC1aHLcku9sBxadlFDD89u8gvM7%2b4y5KslR5L8PdA2F%2beWxS2PK/YH2R7ogxGTmahd1bB6m75xeuUuTnZStJbAc%2biBB3dX/XydCC9xc39eHMPUNiJAwrl%2bb01ldsNP2oeucxbevSWueF/DPrwjEW/0J%2bHH0ZvlBt%2behjcEwHXcKqGc%2b4menku8dtvvwkgL7C1tLRksMDw4cMZJ4ZRwszMjAFCY8eOFaKHDwoKEstkMqfo6Oh2hxpDBw0SWVtbG/kLN3cPU77ZtrW1M8IXJ86cF8D9%2bP58gfrZG77iZ2Zm7iiVyphDl7ETJgt37N4nGD5ytMjcwsLeysqKkV9SUiKIjIzE8p8CZJi96o8T/8oH0eMYoNFA%2bB4hnhiNB5oCNIne7w8n3jj6P0EI/iEC5wz1pt%2bg85wDNIR2jDfJxe/fpt9OBhoMNItW%2bP/1w86YEykdQQ/ah/pYGutLf3rAthcp7UMm1ZOO5jAZC6br3pwxfmROnUkeHrt3B%2bpC49wMw%2b3rfv4XKiDQ8fgBSWQAAAAASUVORK5CYII=\' /%3e%3c/svg%3e\\" width=\\"447\\" alt=\\"png\\" data-srcset=\\"/assets/static/output_13_0.9e473a1.5c5ffb6.png 447w\\" data-sizes=\\"(max-width: 447px) 100vw, 447px\\" data-src=\\"/assets/static/output_13_0.9e473a1.5c5ffb6.png\\"><noscript><img class=\\"g-image g-image--lazy g-image--loaded\\" src=\\"/assets/static/output_13_0.9e473a1.5c5ffb6.png\\" width=\\"447\\" alt=\\"png\\"></noscript></p>\\n<p>With the calculated z-score, we now have a way of also using the normal distribution without the need to explicitly tell $\\\\mu, std$ for the distribution.</p>\\n<h2 id=\\"back-to-the-real-world\\"><a href=\\"#back-to-the-real-world\\" aria-hidden=\\"true\\"><span class=\\"icon icon-link\\"></span></a>Back to the real world!!</h2>\\n<p>Instead of writing the survival function which we will explicitly calculate the probability like so:</p>\\n<pre class=\\"language-python\\"><span class=\\"token comment\\"># score of the survival function</span>\\np <span class=\\"token operator\\">=</span> stats<span class=\\"token punctuation\\">.</span>norm<span class=\\"token punctuation\\">.</span>sf<span class=\\"token punctuation\\">(</span>limit<span class=\\"token punctuation\\">,</span> mu<span class=\\"token punctuation\\">,</span> std<span class=\\"token punctuation\\">)</span>\\np</pre>\\n<pre class=\\"language-text\\">0.02783823512029548</pre>\\n<p>We can now instead use the z-score for each call to a distribution.</p>\\n<pre class=\\"language-python\\"><span class=\\"token comment\\"># score of the survival function</span>\\np <span class=\\"token operator\\">=</span> stats<span class=\\"token punctuation\\">.</span>norm<span class=\\"token punctuation\\">.</span>sf<span class=\\"token punctuation\\">(</span>z<span class=\\"token punctuation\\">)</span>\\np</pre>\\n<pre class=\\"language-text\\">0.02783823512029548</pre>\\n<p>And we can see that it gives the same probability, just using different scales for the $\\\\mu$, $std$</p>\\n"}}]}}}}')}}]);